 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 1 - 4/3/2023 13:9:54


       1/       0 :                     	CPU 68000
       2/       0 :                     	padding off
       3/       0 :                     
       4/       0 :                     z80_ptr function x,(x)<<8&$FF00|(x)>>8&$00FF
       5/       0 :                     
       6/       0 : =$2                  SonicDriverVer = 2
       7/       0 :                     	include "sound/_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                  SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                  psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 :                     	enumconf	$C
(1)   23/       0 : =$88..$B8            	enum		smpsPitch10lo=$88,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
(1)   24/       0 : =$C4..$F4            	nextenum	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
(1)   25/       0 : =$0..$30             	enum		smpsPitch00=$00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
(1)   26/       0 : =$3C..$6C            	nextenum	smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
(1)   27/       0 : =$78                 	nextenum	smpsPitch10hi
(1)   28/       0 :                     	enumconf	1
(1)   29/       0 :                     ; ---------------------------------------------------------------------------
(1)   30/       0 :                     ; Note Equates
(1)   31/       0 : =$80..$8F            	enum		nRst=$80,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   32/       0 : =$90..$9F            	nextenum	nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   33/       0 : =$A0..$AF            	nextenum	nG2,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   34/       0 : =$B0..$BF            	nextenum	nB3,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   35/       0 : =$C0..$CF            	nextenum	nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   36/       0 : =$D0..$DF            	nextenum	nG6,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   37/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   38/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   39/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   40/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   41/       0 : =>TRUE               	if SonicDriverVer<=2
(1)   42/       0 : =$C6                 nMaxPSG				EQU nA5
(1)   43/       0 : =$D2                 nMaxPSG1			EQU nA5+psgdelta
(1)   44/       0 : =$D2                 nMaxPSG2			EQU nA5+psgdelta
(1)   45/       0 : =>FALSE              	else
(1)   46/       0 :                     nMaxPSG				EQU nBb6-psgdelta
(1)   47/       0 :                     nMaxPSG1			EQU nBb6
(1)   48/       0 :                     nMaxPSG2			EQU nB6
(1)   49/       0 : [41]                 	endif
(1)   50/       0 :                     ; ---------------------------------------------------------------------------
(1)   51/       0 :                     ; PSG volume envelope equates
(1)   52/       0 : =$2                  	switch SonicDriverVer
(1)   53/       0 : =>FALSE              		case 1
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 2 - 4/3/2023 13:9:54


(1)   54/       0 :                     			enum		fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   55/       0 :                     			nextenum	fTone_07,fTone_08,fTone_09
(1)   56/       0 : =>TRUE               		case 2
(1)   57/       0 : =$1..$6              			enum		fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   58/       0 : =$7..$C              			nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   59/       0 : =$D                  			nextenum	fTone_0D
(1)   60/       0 : =>FALSE              		elsecase;SonicDriverVer>=3
(1)   61/       0 :                     			enum		sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(1)   62/       0 :                     			nextenum	sTone_07,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   63/       0 :                     			nextenum	sTone_0D,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(1)   64/       0 :                     			nextenum	sTone_13,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(1)   65/       0 :                     			nextenum	sTone_19,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(1)   66/       0 :                     			nextenum	sTone_1F,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(1)   67/       0 :                     			nextenum	sTone_25,sTone_26,sTone_27
(1)   68/       0 :                     			; For conversions:
(1)   69/       0 :                     			if SonicDriverVer>=5
(1)   70/       0 :                     				nextenum	fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   71/       0 :                     				nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   72/       0 :                     				nextenum	fTone_0D
(1)   73/       0 : [69]                 			endif
(1)   74/       0 : [52]                 	endcase
(1)   75/       0 :                     ; ---------------------------------------------------------------------------
(1)   76/       0 :                     ; DAC Equates
(1)   77/       0 : =$2                  	switch SonicDriverVer
(1)   78/       0 : =>FALSE              		case 1
(1)   79/       0 :                     			enum		dKick=$81,dSnare,dTimpani
(1)   80/       0 :                     			enum		dHiTimpani=$88,dMidTimpani,dLowTimpani,dVLowTimpani
(1)   81/       0 : =>TRUE               		case 2
(1)   82/       0 : =$81..$89            			enum		dKick=$81,dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)   83/       0 : =$8A..$8F            			nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)   84/       0 : =$90..$91            			nextenum	dMidClap,dLowClap
(1)   85/       0 : =>FALSE              		case 3
(1)   86/       0 :                     			enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)   87/       0 :                     			nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)   88/       0 :                     			nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)   89/       0 :                     			nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)   90/       0 :                     			nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)   91/       0 :                     			nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)   92/       0 :                     			nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)   93/       0 :                     			nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)   94/       0 :                     			nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)   95/       0 :                     			nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)   96/       0 :                     			nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit_S3
(1)   97/       0 :                     			nextenum	dLowerEchoedClapHit_S3,dHipHopHitKick,dHipHopHitPowerKick
(1)   98/       0 :                     			nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)   99/       0 :                     			nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  100/       0 :                     			nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  101/       0 :                     			nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  102/       0 : =>FALSE              		case 4
(1)  103/       0 :                     			enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)  104/       0 :                     			nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)  105/       0 :                     			nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)  106/       0 :                     			nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)  107/       0 :                     			nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)  108/       0 :                     			nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)  109/       0 :                     			nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)  110/       0 :                     			nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)  111/       0 :                     			nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)  112/       0 :                     			nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)  113/       0 :                     			nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 3 - 4/3/2023 13:9:54


(1)  114/       0 :                     			nextenum	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
(1)  115/       0 :                     			nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)  116/       0 :                     			nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  117/       0 :                     			nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  118/       0 :                     			nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  119/       0 : =>FALSE              		elsecase;SonicDriverVer>=5
(1)  120/       0 :                     			if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1)  121/       0 :                     				enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)  122/       0 :                     				nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)  123/       0 :                     				nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)  124/       0 :                     				nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)  125/       0 :                     				nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)  126/       0 :                     				nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)  127/       0 :                     				nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)  128/       0 : [120]                			endif
(1)  129/       0 :                     			if (use_s3_samples<>0)||(use_sk_samples<>0)
(1)  130/       0 :                     				nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)  131/       0 :                     				nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)  132/       0 :                     				nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)  133/       0 :                     				nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)  134/       0 :                     				nextenum	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
(1)  135/       0 :                     				nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)  136/       0 :                     				nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  137/       0 :                     				nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  138/       0 :                     				nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  139/       0 : [129]                			endif
(1)  140/       0 :                     			; For conversions:
(1)  141/       0 :                     			if (use_s2_samples<>0)
(1)  142/       0 :                     				if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1)  143/       0 :                     					nextenum	dKick
(1)  144/       0 :                     				else
(1)  145/       0 :                     					enum		dKick=$81
(1)  146/       0 : [142]                				endif
(1)  147/       0 :                     				nextenum	dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)  148/       0 :                     				nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)  149/       0 :                     				nextenum	dMidClap,dLowClap
(1)  150/       0 : [141]                			endif
(1)  151/       0 :                     			if (use_s3d_samples<>0)
(1)  152/       0 :                     				nextenum	dFinalFightMetalCrash,dIntroKick
(1)  153/       0 : [151]                			endif
(1)  154/       0 :                     			if (use_s3_samples<>0)
(1)  155/       0 :                     				nextenum	dEchoedClapHit_S3,dLowerEchoedClapHit_S3
(1)  156/       0 : [154]                			endif
(1)  157/       0 : [77]                 	endcase
(1)  158/       0 :                     ; ---------------------------------------------------------------------------
(1)  159/       0 :                     ; Channel IDs for SFX
(1)  160/       0 : =$80                 cPSG1				EQU $80
(1)  161/       0 : =$A0                 cPSG2				EQU $A0
(1)  162/       0 : =$C0                 cPSG3				EQU $C0
(1)  163/       0 : =$E0                 cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)  164/       0 : =$2                  cFM3				EQU $02
(1)  165/       0 : =$4                  cFM4				EQU $04
(1)  166/       0 : =$5                  cFM5				EQU $05
(1)  167/       0 : =$6                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)  168/       0 :                     ; ---------------------------------------------------------------------------
(1)  169/       0 :                     ; Conversion macros and functions
(1)  170/       0 :                     
(1)  171/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)  172/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)  173/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 4 - 4/3/2023 13:9:54


(1)  174/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)  175/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)  176/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)  177/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)  178/       0 :                     
(1)  179/       0 :                     convertMainTempoMod macro mod
(1)  180/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)  181/       0 :                     		dc.b	mod
(1)  182/       0 :                     	elseif SourceDriver==1
(1)  183/       0 :                     		if mod==1
(1)  184/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)  185/       0 :                     		endif
(1)  186/       0 :                     		if SonicDriverVer==2
(1)  187/       0 :                     			dc.b	s1TempotoS2(mod)
(1)  188/       0 :                     		else;if SonicDriverVer>=3
(1)  189/       0 :                     			dc.b	s1TempotoS3(mod)
(1)  190/       0 :                     		endif
(1)  191/       0 :                     	elseif SourceDriver==2
(1)  192/       0 :                     		if mod==0
(1)  193/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)  194/       0 :                     		endif
(1)  195/       0 :                     		if SonicDriverVer==1
(1)  196/       0 :                     			dc.b	s2TempotoS1(mod)
(1)  197/       0 :                     		else;if SonicDriverVer>=3
(1)  198/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  199/       0 :                     		endif
(1)  200/       0 :                     	else;if SourceDriver>=3
(1)  201/       0 :                     		if mod==0
(1)  202/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  203/       0 :                     		endif
(1)  204/       0 :                     		if SonicDriverVer==1
(1)  205/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  206/       0 :                     		else;if SonicDriverVer==2
(1)  207/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  208/       0 :                     		endif
(1)  209/       0 :                     	endif
(1)  210/       0 :                     	endm
(1)  211/       0 :                     
(1)  212/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  213/       0 :                     PSGPitchConvert macro pitch
(1)  214/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  215/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  216/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  217/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  218/       0 :                     	else
(1)  219/       0 :                     		dc.b	pitch
(1)  220/       0 :                     	endif
(1)  221/       0 :                     	endm
(1)  222/       0 :                     
(1)  223/       0 :                     CheckedChannelPointer macro loc
(1)  224/       0 :                     	if SonicDriverVer<>1
(1)  225/       0 :                     		dc.w	z80_ptr(loc)
(1)  226/       0 :                     	else
(1)  227/       0 :                     		if MOMPASS>1
(1)  228/       0 :                     			if loc<songStart
(1)  229/       0 :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  230/       0 :                     			endif
(1)  231/       0 :                     		endif
(1)  232/       0 :                     		dc.w	loc-songStart
(1)  233/       0 :                     	endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 5 - 4/3/2023 13:9:54


(1)  234/       0 :                     	endm
(1)  235/       0 :                     ; ---------------------------------------------------------------------------
(1)  236/       0 :                     ; Header Macros
(1)  237/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  238/       0 :                     
(1)  239/       0 :                     SourceDriver set ver
(1)  240/       0 :                     
(1)  241/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  242/       0 :                     		set SourceSMPS2ASM,sourcesmps2asmver
(1)  243/       0 :                     	else
(1)  244/       0 :                     		set SourceSMPS2ASM,0
(1)  245/       0 :                     	endif
(1)  246/       0 :                     
(1)  247/       0 :                     songStart set *
(1)  248/       0 :                     
(1)  249/       0 :                     	if MOMPASS>1
(1)  250/       0 :                     		if SMPS2ASMVer < SourceSMPS2ASM
(1)  251/       0 :                     			message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  252/       0 :                     		endif
(1)  253/       0 :                     	endif
(1)  254/       0 :                     
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     smpsHeaderVoiceNull macro
(1)  258/       0 :                     	if songStart<>*
(1)  259/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  260/       0 :                     	endif
(1)  261/       0 :                     	dc.w	$0000
(1)  262/       0 :                     	endm
(1)  263/       0 :                     
(1)  264/       0 :                     ; Header - Set up Voice Location
(1)  265/       0 :                     ; Common to music and SFX
(1)  266/       0 :                     smpsHeaderVoice macro loc
(1)  267/       0 :                     	if songStart<>*
(1)  268/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  269/       0 :                     	endif
(1)  270/       0 :                     	if SonicDriverVer<>1
(1)  271/       0 :                     		dc.w	z80_ptr(loc)
(1)  272/       0 :                     	else
(1)  273/       0 :                     		if MOMPASS>1
(1)  274/       0 :                     			if loc<songStart
(1)  275/       0 :                     				fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  276/       0 :                     			endif
(1)  277/       0 :                     		endif
(1)  278/       0 :                     		dc.w	loc-songStart
(1)  279/       0 :                     	endif
(1)  280/       0 :                     	endm
(1)  281/       0 :                     
(1)  282/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  283/       0 :                     ; Common to music and SFX
(1)  284/       0 :                     smpsHeaderVoiceUVB macro
(1)  285/       0 :                     	if songStart<>*
(1)  286/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  287/       0 :                     	endif
(1)  288/       0 :                     	if SonicDriverVer>=5
(1)  289/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  290/       0 :                     	elseif SonicDriverVer>=3
(1)  291/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  292/       0 :                     	else
(1)  293/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 6 - 4/3/2023 13:9:54


(1)  294/       0 :                     	endif
(1)  295/       0 :                     	endm
(1)  296/       0 :                     
(1)  297/       0 :                     ; Header macros for music (not for SFX)
(1)  298/       0 :                     ; Header - Set up Channel Usage
(1)  299/       0 :                     smpsHeaderChan macro fm,psg
(1)  300/       0 :                     	dc.b	fm,psg
(1)  301/       0 :                     	endm
(1)  302/       0 :                     
(1)  303/       0 :                     ; Header - Set up Tempo
(1)  304/       0 :                     smpsHeaderTempo macro div,mod
(1)  305/       0 :                     	dc.b	div
(1)  306/       0 :                     	convertMainTempoMod mod
(1)  307/       0 :                     	endm
(1)  308/       0 :                     
(1)  309/       0 :                     ; Header - Set up DAC Channel
(1)  310/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  311/       0 :                     	CheckedChannelPointer loc
(1)  312/       0 :                     	if ("pitch"<>"")
(1)  313/       0 :                     		dc.b	pitch
(1)  314/       0 :                     		if ("vol"<>"")
(1)  315/       0 :                     			dc.b	vol
(1)  316/       0 :                     		else
(1)  317/       0 :                     			dc.b	$00
(1)  318/       0 :                     		endif
(1)  319/       0 :                     	else
(1)  320/       0 :                     		dc.w	$00
(1)  321/       0 :                     	endif
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; Header - Set up FM Channel
(1)  325/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  326/       0 :                     	CheckedChannelPointer loc
(1)  327/       0 :                     	dc.b	pitch,vol
(1)  328/       0 :                     	endm
(1)  329/       0 :                     
(1)  330/       0 :                     ; Header - Set up PSG Channel
(1)  331/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  332/       0 :                     	CheckedChannelPointer loc
(1)  333/       0 :                     	PSGPitchConvert pitch
(1)  334/       0 :                     	dc.b	vol
(1)  335/       0 :                     	; Frequency envelope
(1)  336/       0 :                     	if (SonicDriverVer>=3) && (SourceDriver<3)
(1)  337/       0 :                     		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)  338/       0 :                     		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)  339/       0 :                     		; other drivers may try to process as valid data, so manually force it to 0 here.
(1)  340/       0 :                     		dc.b	0
(1)  341/       0 :                     	else
(1)  342/       0 :                     		if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && (mod<>0)
(1)  343/       0 :                     			message "This track header specifies a frequency envelope, but this driver does not support them."			
(1)  344/       0 :                     		endif
(1)  345/       0 :                     		dc.b	mod
(1)  346/       0 :                     	endif
(1)  347/       0 :                     	; Volume envelope
(1)  348/       0 :                     	dc.b	voice
(1)  349/       0 :                     	endm
(1)  350/       0 :                     
(1)  351/       0 :                     ; Header macros for SFX (not for music)
(1)  352/       0 :                     ; Header - Set up Tempo
(1)  353/       0 :                     smpsHeaderTempoSFX macro div
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 7 - 4/3/2023 13:9:54


(1)  354/       0 :                     	dc.b	div
(1)  355/       0 :                     	endm
(1)  356/       0 :                     
(1)  357/       0 :                     ; Header - Set up Channel Usage
(1)  358/       0 :                     smpsHeaderChanSFX macro chan
(1)  359/       0 :                     	dc.b	chan
(1)  360/       0 :                     	endm
(1)  361/       0 :                     
(1)  362/       0 :                     ; Header - Set up FM Channel
(1)  363/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  364/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  365/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  366/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  367/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  368/       0 :                     	endif
(1)  369/       0 :                     	dc.b	$80,chanid
(1)  370/       0 :                     	CheckedChannelPointer loc
(1)  371/       0 :                     	if (chanid&$80)<>0
(1)  372/       0 :                     		PSGPitchConvert pitch
(1)  373/       0 :                     	else
(1)  374/       0 :                     		dc.b	pitch
(1)  375/       0 :                     	endif
(1)  376/       0 :                     	dc.b	vol
(1)  377/       0 :                     	endm
(1)  378/       0 :                     ; ---------------------------------------------------------------------------
(1)  379/       0 :                     ; Co-ord Flag Macros and Equates
(1)  380/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  381/       0 :                     smpsPan macro direction,amsfms
(1)  382/       0 :                     panNone set $00
(1)  383/       0 :                     panRight set $40
(1)  384/       0 :                     panLeft set $80
(1)  385/       0 :                     panCentre set $C0
(1)  386/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  387/       0 :                     	dc.b $E0,direction+amsfms
(1)  388/       0 :                     	endm
(1)  389/       0 :                     
(1)  390/       0 :                     ; E1xx - Set channel detune to val
(1)  391/       0 :                     smpsDetune macro val
(1)  392/       0 :                     	dc.b	$E1,val
(1)  393/       0 :                     	endm
(1)  394/       0 :                     
(1)  395/       0 :                     ; E2xx - Useless
(1)  396/       0 :                     smpsNop macro val
(1)  397/       0 :                     	if SonicDriverVer<3
(1)  398/       0 :                     		dc.b	$E2,val
(1)  399/       0 :                     	endif
(1)  400/       0 :                     	endm
(1)  401/       0 :                     
(1)  402/       0 :                     ; Return (used after smpsCall)
(1)  403/       0 :                     smpsReturn macro val
(1)  404/       0 :                     	if SonicDriverVer>=3
(1)  405/       0 :                     		dc.b	$F9
(1)  406/       0 :                     	else
(1)  407/       0 :                     		dc.b	$E3
(1)  408/       0 :                     	endif
(1)  409/       0 :                     	endm
(1)  410/       0 :                     
(1)  411/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  412/       0 :                     smpsFade macro val
(1)  413/       0 :                     	if SonicDriverVer>=3
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 8 - 4/3/2023 13:9:54


(1)  414/       0 :                     		dc.b	$E2
(1)  415/       0 :                     		if ("val"<>"")
(1)  416/       0 :                     			dc.b	val
(1)  417/       0 :                     		else
(1)  418/       0 :                     			dc.b	$FF
(1)  419/       0 :                     		endif
(1)  420/       0 :                     		if SourceDriver<3
(1)  421/       0 :                     			smpsStop
(1)  422/       0 :                     		endif
(1)  423/       0 :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(1)  424/       0 :                     		; This is one of those weird S3+ "fades" that we don't need
(1)  425/       0 :                     	else
(1)  426/       0 :                     		dc.b	$E4
(1)  427/       0 :                     	endif
(1)  428/       0 :                     	endm
(1)  429/       0 :                     
(1)  430/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  431/       0 :                     smpsChanTempoDiv macro val
(1)  432/       0 :                     	if SonicDriverVer>=5
(1)  433/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  434/       0 :                     		dc.b	$FF,$08,val
(1)  435/       0 :                     	elseif SonicDriverVer==3
(1)  436/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  437/       0 :                     	else
(1)  438/       0 :                     		dc.b	$E5,val
(1)  439/       0 :                     	endif
(1)  440/       0 :                     	endm
(1)  441/       0 :                     
(1)  442/       0 :                     ; E6xx - Alter Volume by xx
(1)  443/       0 :                     smpsAlterVol macro val
(1)  444/       0 :                     	dc.b	$E6,val
(1)  445/       0 :                     	endm
(1)  446/       0 :                     
(1)  447/       0 :                     ; E7 - Prevent attack of next note
(1)  448/       0 : =$E7                 smpsNoAttack	EQU $E7
(1)  449/       0 :                     
(1)  450/       0 :                     ; E8xx - Set note fill to xx
(1)  451/       0 :                     smpsNoteFill macro val
(1)  452/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  453/       0 :                     		; Unique to Flamewing's modified driver
(1)  454/       0 :                     		dc.b	$FF,$0A,val
(1)  455/       0 :                     	else
(1)  456/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  457/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  458/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  459/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  460/       0 :                     		endif
(1)  461/       0 :                     		dc.b	$E8,val
(1)  462/       0 :                     	endif
(1)  463/       0 :                     	endm
(1)  464/       0 :                     
(1)  465/       0 :                     ; Add xx to channel pitch
(1)  466/       0 :                     smpsChangeTransposition macro val
(1)  467/       0 :                     	if SonicDriverVer>=3
(1)  468/       0 :                     		dc.b	$FB,val
(1)  469/       0 :                     	else
(1)  470/       0 :                     		dc.b	$E9,val
(1)  471/       0 :                     	endif
(1)  472/       0 :                     	endm
(1)  473/       0 :                     
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 9 - 4/3/2023 13:9:54


(1)  474/       0 :                     ; Set music tempo modifier to xx
(1)  475/       0 :                     smpsSetTempoMod macro mod
(1)  476/       0 :                     	if SonicDriverVer>=3
(1)  477/       0 :                     		dc.b	$FF,$00
(1)  478/       0 :                     	else
(1)  479/       0 :                     		dc.b	$EA
(1)  480/       0 :                     	endif
(1)  481/       0 :                     	convertMainTempoMod mod
(1)  482/       0 :                     	endm
(1)  483/       0 :                     
(1)  484/       0 :                     ; Set music tempo divider to xx
(1)  485/       0 :                     smpsSetTempoDiv macro val
(1)  486/       0 :                     	if SonicDriverVer>=3
(1)  487/       0 :                     		dc.b	$FF,$04,val
(1)  488/       0 :                     	else
(1)  489/       0 :                     		dc.b	$EB,val
(1)  490/       0 :                     	endif
(1)  491/       0 :                     	endm
(1)  492/       0 :                     
(1)  493/       0 :                     ; ECxx - Set Volume to xx
(1)  494/       0 :                     smpsSetVol macro val
(1)  495/       0 :                     	if SonicDriverVer>=3
(1)  496/       0 :                     		dc.b	$E4,val
(1)  497/       0 :                     	else
(1)  498/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  499/       0 :                     	endif
(1)  500/       0 :                     	endm
(1)  501/       0 :                     
(1)  502/       0 :                     ; Works on all drivers
(1)  503/       0 :                     smpsPSGAlterVol macro vol
(1)  504/       0 :                     	dc.b	$EC,vol
(1)  505/       0 :                     	endm
(1)  506/       0 :                     
(1)  507/       0 :                     ; Clears pushing sound flag in S1
(1)  508/       0 :                     smpsClearPush macro
(1)  509/       0 :                     	if SonicDriverVer==1
(1)  510/       0 :                     		dc.b	$ED
(1)  511/       0 :                     	else
(1)  512/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  513/       0 :                     	endif
(1)  514/       0 :                     	endm
(1)  515/       0 :                     
(1)  516/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  517/       0 :                     smpsStopSpecial macro
(1)  518/       0 :                     	if SonicDriverVer==1
(1)  519/       0 :                     		dc.b	$EE
(1)  520/       0 :                     	else
(1)  521/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  522/       0 :                     		smpsStop
(1)  523/       0 :                     	endif
(1)  524/       0 :                     	endm
(1)  525/       0 :                     
(1)  526/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  527/       0 :                     smpsFMvoice macro voice,songID
(1)  528/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  529/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  530/       0 :                     	else
(1)  531/       0 :                     		dc.b	$EF,voice
(1)  532/       0 :                     	endif
(1)  533/       0 :                     	endm
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 10 - 4/3/2023 13:9:54


(1)  534/       0 :                     
(1)  535/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  536/       0 :                     smpsModSet macro wait,speed,change,step
(1)  537/       0 :                     	dc.b	$F0
(1)  538/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  539/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  540/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  541/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  542/       0 :                     	else
(1)  543/       0 :                     		dc.b	wait,speed,change,step
(1)  544/       0 :                     	endif
(1)  545/       0 :                     	;dc.b	speed,change,step
(1)  546/       0 :                     	endm
(1)  547/       0 :                     
(1)  548/       0 :                     ; Turn on Modulation
(1)  549/       0 :                     smpsModOn macro type
(1)  550/       0 :                     	if SonicDriverVer>=3
(1)  551/       0 :                     		if "type"<>""
(1)  552/       0 :                     			dc.b	$F4,type
(1)  553/       0 :                     		else
(1)  554/       0 :                     			dc.b	$F4,$80
(1)  555/       0 :                     		endif
(1)  556/       0 :                     	else
(1)  557/       0 :                     		dc.b	$F1
(1)  558/       0 :                     	endif
(1)  559/       0 :                     	endm
(1)  560/       0 :                     
(1)  561/       0 :                     ; F2 - End of channel
(1)  562/       0 :                     smpsStop macro
(1)  563/       0 :                     	dc.b	$F2
(1)  564/       0 :                     	endm
(1)  565/       0 :                     
(1)  566/       0 :                     ; F3xx - PSG waveform to xx
(1)  567/       0 :                     smpsPSGform macro form
(1)  568/       0 :                     	dc.b	$F3,form
(1)  569/       0 :                     	endm
(1)  570/       0 :                     
(1)  571/       0 :                     ; Turn off Modulation
(1)  572/       0 :                     smpsModOff macro
(1)  573/       0 :                     	if SonicDriverVer>=3
(1)  574/       0 :                     		dc.b	$FA
(1)  575/       0 :                     	else
(1)  576/       0 :                     		dc.b	$F4
(1)  577/       0 :                     	endif
(1)  578/       0 :                     	endm
(1)  579/       0 :                     
(1)  580/       0 :                     ; F5xx - PSG voice to xx
(1)  581/       0 :                     smpsPSGvoice macro voice
(1)  582/       0 :                     	dc.b	$F5,voice
(1)  583/       0 :                     	endm
(1)  584/       0 :                     
(1)  585/       0 :                     ; F6xxxx - Jump to xxxx
(1)  586/       0 :                     smpsJump macro loc
(1)  587/       0 :                     	dc.b	$F6
(1)  588/       0 :                     	if SonicDriverVer<>1
(1)  589/       0 :                     		dc.w	z80_ptr(loc)
(1)  590/       0 :                     	else
(1)  591/       0 :                     		dc.w	loc-*-1
(1)  592/       0 :                     	endif
(1)  593/       0 :                     	endm
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 11 - 4/3/2023 13:9:54


(1)  594/       0 :                     
(1)  595/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  596/       0 :                     smpsLoop macro index,loops,loc
(1)  597/       0 :                     	dc.b	$F7
(1)  598/       0 :                     	dc.b	index,loops
(1)  599/       0 :                     	if SonicDriverVer<>1
(1)  600/       0 :                     		dc.w	z80_ptr(loc)
(1)  601/       0 :                     	else
(1)  602/       0 :                     		dc.w	loc-*-1
(1)  603/       0 :                     	endif
(1)  604/       0 :                     	endm
(1)  605/       0 :                     
(1)  606/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  607/       0 :                     smpsCall macro loc
(1)  608/       0 :                     	dc.b	$F8
(1)  609/       0 :                     	if SonicDriverVer<>1
(1)  610/       0 :                     		dc.w	z80_ptr(loc)
(1)  611/       0 :                     	else
(1)  612/       0 :                     		dc.w	loc-*-1
(1)  613/       0 :                     	endif
(1)  614/       0 :                     	endm
(1)  615/       0 :                     ; ---------------------------------------------------------------------------
(1)  616/       0 :                     ; Alter Volume
(1)  617/       0 :                     smpsFMAlterVol macro val1,val2
(1)  618/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  619/       0 :                     		dc.b	$E5,val1,val2
(1)  620/       0 :                     	else
(1)  621/       0 :                     		dc.b	$E6,val1
(1)  622/       0 :                     	endif
(1)  623/       0 :                     	endm
(1)  624/       0 :                     
(1)  625/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  626/       0 : =>FALSE              	if SonicDriverVer>=3
(1)  627/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  628/       0 :                     smpsStopFM macro
(1)  629/       0 :                     	dc.b	$E3
(1)  630/       0 :                     	endm
(1)  631/       0 :                     
(1)  632/       0 :                     ; Spindash Rev
(1)  633/       0 :                     smpsSpindashRev macro
(1)  634/       0 :                     	dc.b	$E9
(1)  635/       0 :                     	endm
(1)  636/       0 :                     
(1)  637/       0 :                     smpsPlayDACSample macro sample
(1)  638/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  639/       0 :                     	endm
(1)  640/       0 :                     
(1)  641/       0 :                     smpsConditionalJump macro index,loc
(1)  642/       0 :                     	dc.b	$EB
(1)  643/       0 :                     	dc.b	index
(1)  644/       0 :                     	dc.w	z80_ptr(loc)
(1)  645/       0 :                     	endm
(1)  646/       0 :                     
(1)  647/       0 :                     ; Set note values to xx-$40
(1)  648/       0 :                     smpsSetNote macro val
(1)  649/       0 :                     	dc.b	$ED,val
(1)  650/       0 :                     	endm
(1)  651/       0 :                     
(1)  652/       0 :                     smpsFMICommand macro reg,val
(1)  653/       0 :                     	dc.b	$EE,reg,val
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 12 - 4/3/2023 13:9:54


(1)  654/       0 :                     	endm
(1)  655/       0 :                     
(1)  656/       0 :                     ; Set Modulation
(1)  657/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  658/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  659/       0 :                     	endm
(1)  660/       0 :                     
(1)  661/       0 :                     ; Set Modulation
(1)  662/       0 :                     smpsModChange macro val
(1)  663/       0 :                     	dc.b	$F4,val
(1)  664/       0 :                     	endm
(1)  665/       0 :                     
(1)  666/       0 :                     ; FCxxxx - Jump to xxxx
(1)  667/       0 :                     smpsContinuousLoop macro loc
(1)  668/       0 :                     	dc.b	$FC
(1)  669/       0 :                     	dc.w	z80_ptr(loc)
(1)  670/       0 :                     	endm
(1)  671/       0 :                     
(1)  672/       0 :                     smpsAlternateSMPS macro flag
(1)  673/       0 :                     	dc.b	$FD,flag
(1)  674/       0 :                     	endm
(1)  675/       0 :                     
(1)  676/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  677/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  678/       0 :                     	endm
(1)  679/       0 :                     
(1)  680/       0 :                     smpsPlaySound macro index
(1)  681/       0 :                     	if SonicDriverVer>=5
(1)  682/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(1)  683/       0 :                     	endif
(1)  684/       0 :                     	dc.b	$FF,$01,index
(1)  685/       0 :                     	endm
(1)  686/       0 :                     
(1)  687/       0 :                     smpsHaltMusic macro flag
(1)  688/       0 :                     	dc.b	$FF,$02,flag
(1)  689/       0 :                     	endm
(1)  690/       0 :                     
(1)  691/       0 :                     smpsCopyData macro data,len
(1)  692/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  693/       0 :                     	dc.b	$FF,$03
(1)  694/       0 :                     	dc.w	little_endian(data)
(1)  695/       0 :                     	dc.b	len
(1)  696/       0 :                     	endm
(1)  697/       0 :                     
(1)  698/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  699/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  700/       0 :                     	endm
(1)  701/       0 :                     
(1)  702/       0 :                     smpsFMVolEnv macro tone,mask
(1)  703/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  704/       0 :                     	endm
(1)  705/       0 :                     
(1)  706/       0 :                     smpsResetSpindashRev macro val
(1)  707/       0 :                     	dc.b	$FF,$07
(1)  708/       0 :                     	endm
(1)  709/       0 :                     
(1)  710/       0 :                     	; Flags ported from other drivers.
(1)  711/       0 :                     	if SonicDriverVer>=5
(1)  712/       0 :                     smpsChanFMCommand macro reg,val
(1)  713/       0 :                     	dc.b	$FF,$09,reg,val
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 13 - 4/3/2023 13:9:54


(1)  714/       0 :                     	endm
(1)  715/       0 :                     
(1)  716/       0 :                     smpsPitchSlide macro enable
(1)  717/       0 :                     	dc.b	$FF,$0B,enable
(1)  718/       0 :                     	endm
(1)  719/       0 :                     
(1)  720/       0 :                     smpsSetLFO macro enable,amsfms
(1)  721/       0 :                     	dc.b	$FF,$0C,enable,amsfms
(1)  722/       0 :                     	endm
(1)  723/       0 :                     
(1)  724/       0 :                     smpsPlayMusic macro index
(1)  725/       0 :                     	dc.b	$FF,$0D,index
(1)  726/       0 :                     	endm
(1)  727/       0 : [711]                	endif
(1)  728/       0 :                     
(1)  729/       0 : [626]                	endif
(1)  730/       0 :                     ; ---------------------------------------------------------------------------
(1)  731/       0 :                     ; S1/S2 only coordination flag
(1)  732/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  733/       0 :                     smpsMaxRelRate macro
(1)  734/       0 :                     	if SonicDriverVer>=3
(1)  735/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  736/       0 :                     		smpsFMICommand $88,$0F
(1)  737/       0 :                     		smpsFMICommand $8C,$0F
(1)  738/       0 :                     	else
(1)  739/       0 :                     		dc.b	$F9
(1)  740/       0 :                     	endif
(1)  741/       0 :                     	endm
(1)  742/       0 :                     ; ---------------------------------------------------------------------------
(1)  743/       0 :                     ; Backwards compatibility
(1)  744/       0 :                     smpsAlterNote macro
(1)  745/       0 :                     	smpsDetune	ALLARGS
(1)  746/       0 :                     	endm
(1)  747/       0 :                     
(1)  748/       0 :                     smpsAlterPitch macro
(1)  749/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  750/       0 :                     	endm
(1)  751/       0 :                     
(1)  752/       0 :                     smpsFMFlutter macro
(1)  753/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  754/       0 :                     	endm
(1)  755/       0 :                     
(1)  756/       0 :                     smpsWeirdD1LRR macro
(1)  757/       0 :                     	smpsMaxRelRate ALLARGS
(1)  758/       0 :                     	endm
(1)  759/       0 :                     
(1)  760/       0 :                     smpsSetvoice macro
(1)  761/       0 :                     	smpsFMvoice ALLARGS
(1)  762/       0 :                     	endm
(1)  763/       0 :                     ; ---------------------------------------------------------------------------
(1)  764/       0 :                     ; Macros for FM instruments
(1)  765/       0 :                     ; Voices - Feedback
(1)  766/       0 :                     smpsVcFeedback macro val
(1)  767/       0 :                     vcFeedback set val
(1)  768/       0 :                     	endm
(1)  769/       0 :                     
(1)  770/       0 :                     ; Voices - Algorithm
(1)  771/       0 :                     smpsVcAlgorithm macro val
(1)  772/       0 :                     vcAlgorithm set val
(1)  773/       0 :                     	endm
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 14 - 4/3/2023 13:9:54


(1)  774/       0 :                     
(1)  775/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  776/       0 :                     vcUnusedBits set val
(1)  777/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(1)  778/       0 :                     		set vcD1R1Unk,d1r1<<5
(1)  779/       0 :                     		set vcD1R2Unk,d1r2<<5
(1)  780/       0 :                     		set vcD1R3Unk,d1r3<<5
(1)  781/       0 :                     		set vcD1R4Unk,d1r4<<5
(1)  782/       0 :                     	else
(1)  783/       0 :                     		set vcD1R1Unk,0
(1)  784/       0 :                     		set vcD1R2Unk,0
(1)  785/       0 :                     		set vcD1R3Unk,0
(1)  786/       0 :                     		set vcD1R4Unk,0
(1)  787/       0 :                     	endif
(1)  788/       0 :                     	endm
(1)  789/       0 :                     
(1)  790/       0 :                     ; Voices - Detune
(1)  791/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  792/       0 :                     	set vcDT1,op1
(1)  793/       0 :                     	set vcDT2,op2
(1)  794/       0 :                     	set vcDT3,op3
(1)  795/       0 :                     	set vcDT4,op4
(1)  796/       0 :                     	endm
(1)  797/       0 :                     
(1)  798/       0 :                     ; Voices - Coarse-Frequency
(1)  799/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  800/       0 :                     	set vcCF1,op1
(1)  801/       0 :                     	set vcCF2,op2
(1)  802/       0 :                     	set vcCF3,op3
(1)  803/       0 :                     	set vcCF4,op4
(1)  804/       0 :                     	endm
(1)  805/       0 :                     
(1)  806/       0 :                     ; Voices - Rate Scale
(1)  807/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  808/       0 :                     	set vcRS1,op1
(1)  809/       0 :                     	set vcRS2,op2
(1)  810/       0 :                     	set vcRS3,op3
(1)  811/       0 :                     	set vcRS4,op4
(1)  812/       0 :                     	endm
(1)  813/       0 :                     
(1)  814/       0 :                     ; Voices - Attack Rate
(1)  815/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  816/       0 :                     	set vcAR1,op1
(1)  817/       0 :                     	set vcAR2,op2
(1)  818/       0 :                     	set vcAR3,op3
(1)  819/       0 :                     	set vcAR4,op4
(1)  820/       0 :                     	endm
(1)  821/       0 :                     
(1)  822/       0 :                     ; Voices - Amplitude Modulation
(1)  823/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  824/       0 :                     ; were the Amplitude Modulation.
(1)  825/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  826/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  827/       0 :                     	if SourceSMPS2ASM==0
(1)  828/       0 :                     		set vcAM1,op1<<5
(1)  829/       0 :                     		set vcAM2,op2<<5
(1)  830/       0 :                     		set vcAM3,op3<<5
(1)  831/       0 :                     		set vcAM4,op4<<5
(1)  832/       0 :                     	else
(1)  833/       0 :                     		set vcAM1,op1<<7
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 15 - 4/3/2023 13:9:54


(1)  834/       0 :                     		set vcAM2,op2<<7
(1)  835/       0 :                     		set vcAM3,op3<<7
(1)  836/       0 :                     		set vcAM4,op4<<7
(1)  837/       0 :                     	endif
(1)  838/       0 :                     	endm
(1)  839/       0 :                     
(1)  840/       0 :                     ; Voices - First Decay Rate
(1)  841/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  842/       0 :                     	set vcD1R1,op1
(1)  843/       0 :                     	set vcD1R2,op2
(1)  844/       0 :                     	set vcD1R3,op3
(1)  845/       0 :                     	set vcD1R4,op4
(1)  846/       0 :                     	endm
(1)  847/       0 :                     
(1)  848/       0 :                     ; Voices - Second Decay Rate
(1)  849/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  850/       0 :                     	set vcD2R1,op1
(1)  851/       0 :                     	set vcD2R2,op2
(1)  852/       0 :                     	set vcD2R3,op3
(1)  853/       0 :                     	set vcD2R4,op4
(1)  854/       0 :                     	endm
(1)  855/       0 :                     
(1)  856/       0 :                     ; Voices - Decay Level
(1)  857/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  858/       0 :                     	set vcDL1,op1
(1)  859/       0 :                     	set vcDL2,op2
(1)  860/       0 :                     	set vcDL3,op3
(1)  861/       0 :                     	set vcDL4,op4
(1)  862/       0 :                     	endm
(1)  863/       0 :                     
(1)  864/       0 :                     ; Voices - Release Rate
(1)  865/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  866/       0 :                     	set vcRR1,op1
(1)  867/       0 :                     	set vcRR2,op2
(1)  868/       0 :                     	set vcRR3,op3
(1)  869/       0 :                     	set vcRR4,op4
(1)  870/       0 :                     	endm
(1)  871/       0 :                     
(1)  872/       0 :                     ; Voices - Total Level
(1)  873/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  874/       0 :                     ; but later versions leave it up to the user.
(1)  875/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  876/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  877/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  878/       0 :                     ; SMPS Z80 does the opposite.
(1)  879/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  880/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  881/       0 :                     ; what we do, so we just print a warning.
(1)  882/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  883/       0 :                     	set vcTL1,op1
(1)  884/       0 :                     	set vcTL2,op2
(1)  885/       0 :                     	set vcTL3,op3
(1)  886/       0 :                     	set vcTL4,op4
(1)  887/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  888/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  889/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  890/       0 :                     	if SourceSMPS2ASM==0
(1)  891/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  892/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  893/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/_smps2asm_inc.asm) - Page 16 - 4/3/2023 13:9:54


(1)  894/       0 :                     		set vcTLMask1,$80
(1)  895/       0 :                     	else
(1)  896/       0 :                     		set vcTLMask4,0
(1)  897/       0 :                     		set vcTLMask3,0
(1)  898/       0 :                     		set vcTLMask2,0
(1)  899/       0 :                     		set vcTLMask1,0
(1)  900/       0 :                     	endif
(1)  901/       0 :                     
(1)  902/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  903/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  904/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  905/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  906/       0 :                     		set vcTLMask1,$80
(1)  907/       0 :                     		set vcTL1,vcTL1&$7F
(1)  908/       0 :                     		set vcTL2,vcTL2&$7F
(1)  909/       0 :                     		set vcTL3,vcTL3&$7F
(1)  910/       0 :                     		set vcTL4,vcTL4&$7F
(1)  911/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  912/       0 :                     		if MOMPASS>1
(1)  913/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  914/       0 :                     		endif
(1)  915/       0 :                     	endif
(1)  916/       0 :                     
(1)  917/       0 :                     	if SonicDriverVer==2
(1)  918/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  919/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  920/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  921/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  922/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  923/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  924/       0 :                     	else
(1)  925/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  926/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  927/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  928/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  929/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  930/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  931/       0 :                     	endif
(1)  932/       0 :                     	endm
(1)  933/       0 :                     
(1)  934/       0 :                     
       8/       0 :                     
       9/    1380 :                     	phase $1380
      10/    1380 :                     	include "sound/music/89 - CNZ.asm"
(1)    1/    1380 :                     CNZ_Header:
(1)    2/    1380 : (MACRO)              	smpsHeaderStartSong 2, 1
(1)    2/    1380 :                     
(1)    2/    1380 : =$2                  SourceDriver set 2
(1)    2/    1380 :                     
(1)    2/    1380 : =>TRUE                       if ("1"<>"")
(1)    2/    1380 : =$1                                  set SourceSMPS2ASM,1
(1)    2/    1380 : =>FALSE                      else
(1)    2/    1380 :                                     set SourceSMPS2ASM,0
(1)    2/    1380 : [2]                          endif
(1)    2/    1380 :                     
(1)    2/    1380 : =$1380               songStart set *
(1)    2/    1380 :                     
(1)    2/    1380 : =>TRUE                       if MOMPASS>1
(1)    2/    1380 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/    1380 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 17 - 4/3/2023 13:9:54


(1)    2/    1380 : [2]                                  endif
(1)    2/    1380 : [2]                          endif
(1)    2/    1380 :                     
(1)    3/    1380 : (MACRO)              	smpsHeaderVoice     CNZ_Voices
(1)    3/    1380 : =>FALSE                      if songStart<>*
(1)    3/    1380 :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/    1380 : [3]                          endif
(1)    3/    1380 : =>TRUE                       if SonicDriverVer<>1
(1)    3/    1380 : 521A                                dc.w    z80_ptr(CNZ_Voices)
(1)    3/    1382 : =>FALSE                      else
(1)    3/    1382 :                                     if MOMPASS>1
(1)    3/    1382 :                                             if CNZ_Voices<songStart
(1)    3/    1382 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/    1382 : [3]                                          endif
(1)    3/    1382 : [3]                                  endif
(1)    3/    1382 :                                     dc.w    CNZ_Voices-songStart
(1)    3/    1382 : [3]                          endif
(1)    4/    1382 : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/    1382 : 0603                        dc.b    $06,$03
(1)    5/    1384 : (MACRO)              	smpsHeaderTempo     $01, $48
(1)    5/    1384 : 01                          dc.b    $01
(1)    5/    1385 :  (MACRO-2)                   convertMainTempoMod $48
(1)    5/    1385 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/    1385 : 48                                  dc.b    $48
(1)    5/    1386 : =>FALSE                      elseif SourceDriver==1
(1)    5/    1386 :                                     if $48==1
(1)    5/    1386 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 :                                     if SonicDriverVer==2
(1)    5/    1386 :                                             dc.b    s1TempotoS2($48)
(1)    5/    1386 :                                     else;if SonicDriverVer>=3
(1)    5/    1386 :                                             dc.b    s1TempotoS3($48)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : =>FALSE                      elseif SourceDriver==2
(1)    5/    1386 :                                     if $48==0
(1)    5/    1386 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 :                                     if SonicDriverVer==1
(1)    5/    1386 :                                             dc.b    s2TempotoS1($48)
(1)    5/    1386 :                                     else;if SonicDriverVer>=3
(1)    5/    1386 :                                             dc.b    s2TempotoS3($48)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : =>FALSE                      else;if SourceDriver>=3
(1)    5/    1386 :                                     if $48==0
(1)    5/    1386 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 :                                     if SonicDriverVer==1
(1)    5/    1386 :                                             dc.b    s3TempotoS1($48)
(1)    5/    1386 :                                     else;if SonicDriverVer==2
(1)    5/    1386 :                                             dc.b    s3TempotoS2($48)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : [5]                          endif
(1)    6/    1386 :                     
(1)    7/    1386 : (MACRO)              	smpsHeaderDAC       CNZ_DAC
(1)    7/    1386 :  (MACRO-2)                   CheckedChannelPointer CNZ_DAC
(1)    7/    1386 : =>TRUE                       if SonicDriverVer<>1
(1)    7/    1386 : 0B1A                                dc.w    z80_ptr(CNZ_DAC)
(1)    7/    1388 : =>FALSE                      else
(1)    7/    1388 :                                     if MOMPASS>1
(1)    7/    1388 :                                             if CNZ_DAC<songStart
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 18 - 4/3/2023 13:9:54


(1)    7/    1388 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/    1388 : [7]                                          endif
(1)    7/    1388 : [7]                                  endif
(1)    7/    1388 :                                     dc.w    CNZ_DAC-songStart
(1)    7/    1388 : [7]                          endif
(1)    7/    1388 : =>FALSE                      if (""<>"")
(1)    7/    1388 :                                     dc.b    
(1)    7/    1388 :                                     if (""<>"")
(1)    7/    1388 :                                             dc.b    
(1)    7/    1388 :                                     else
(1)    7/    1388 :                                             dc.b    $00
(1)    7/    1388 : [7]                                  endif
(1)    7/    1388 : =>TRUE                       else
(1)    7/    1388 : 0000                                dc.w    $00
(1)    7/    138A : [7]                          endif
(1)    8/    138A : (MACRO)              	smpsHeaderFM        CNZ_FM1,	$0C, $08
(1)    8/    138A :  (MACRO-2)                   CheckedChannelPointer CNZ_FM1
(1)    8/    138A : =>TRUE                       if SonicDriverVer<>1
(1)    8/    138A : B013                                dc.w    z80_ptr(CNZ_FM1)
(1)    8/    138C : =>FALSE                      else
(1)    8/    138C :                                     if MOMPASS>1
(1)    8/    138C :                                             if CNZ_FM1<songStart
(1)    8/    138C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/    138C : [8]                                          endif
(1)    8/    138C : [8]                                  endif
(1)    8/    138C :                                     dc.w    CNZ_FM1-songStart
(1)    8/    138C : [8]                          endif
(1)    8/    138C : 0C08                        dc.b    $0C,$08
(1)    9/    138E : (MACRO)              	smpsHeaderFM        CNZ_FM2,	$F4, $0A
(1)    9/    138E :  (MACRO-2)                   CheckedChannelPointer CNZ_FM2
(1)    9/    138E : =>TRUE                       if SonicDriverVer<>1
(1)    9/    138E : C916                                dc.w    z80_ptr(CNZ_FM2)
(1)    9/    1390 : =>FALSE                      else
(1)    9/    1390 :                                     if MOMPASS>1
(1)    9/    1390 :                                             if CNZ_FM2<songStart
(1)    9/    1390 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/    1390 : [9]                                          endif
(1)    9/    1390 : [9]                                  endif
(1)    9/    1390 :                                     dc.w    CNZ_FM2-songStart
(1)    9/    1390 : [9]                          endif
(1)    9/    1390 : F40A                        dc.b    $F4,$0A
(1)   10/    1392 : (MACRO)              	smpsHeaderFM        CNZ_FM3,	$F4, $12
(1)   10/    1392 :  (MACRO-2)                   CheckedChannelPointer CNZ_FM3
(1)   10/    1392 : =>TRUE                       if SonicDriverVer<>1
(1)   10/    1392 : 8214                                dc.w    z80_ptr(CNZ_FM3)
(1)   10/    1394 : =>FALSE                      else
(1)   10/    1394 :                                     if MOMPASS>1
(1)   10/    1394 :                                             if CNZ_FM3<songStart
(1)   10/    1394 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/    1394 : [10]                                         endif
(1)   10/    1394 : [10]                                 endif
(1)   10/    1394 :                                     dc.w    CNZ_FM3-songStart
(1)   10/    1394 : [10]                         endif
(1)   10/    1394 : F412                        dc.b    $F4,$12
(1)   11/    1396 : (MACRO)              	smpsHeaderFM        CNZ_FM4,	$F4, $12
(1)   11/    1396 :  (MACRO-2)                   CheckedChannelPointer CNZ_FM4
(1)   11/    1396 : =>TRUE                       if SonicDriverVer<>1
(1)   11/    1396 : B815                                dc.w    z80_ptr(CNZ_FM4)
(1)   11/    1398 : =>FALSE                      else
(1)   11/    1398 :                                     if MOMPASS>1
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 19 - 4/3/2023 13:9:54


(1)   11/    1398 :                                             if CNZ_FM4<songStart
(1)   11/    1398 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/    1398 : [11]                                         endif
(1)   11/    1398 : [11]                                 endif
(1)   11/    1398 :                                     dc.w    CNZ_FM4-songStart
(1)   11/    1398 : [11]                         endif
(1)   11/    1398 : F412                        dc.b    $F4,$12
(1)   12/    139A : (MACRO)              	smpsHeaderFM        CNZ_FM5,	$F4, $0F
(1)   12/    139A :  (MACRO-2)                   CheckedChannelPointer CNZ_FM5
(1)   12/    139A : =>TRUE                       if SonicDriverVer<>1
(1)   12/    139A : E117                                dc.w    z80_ptr(CNZ_FM5)
(1)   12/    139C : =>FALSE                      else
(1)   12/    139C :                                     if MOMPASS>1
(1)   12/    139C :                                             if CNZ_FM5<songStart
(1)   12/    139C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/    139C : [12]                                         endif
(1)   12/    139C : [12]                                 endif
(1)   12/    139C :                                     dc.w    CNZ_FM5-songStart
(1)   12/    139C : [12]                         endif
(1)   12/    139C : F40F                        dc.b    $F4,$0F
(1)   13/    139E : (MACRO)              	smpsHeaderPSG       CNZ_PSG1,	$DC, $05, $00, $00
(1)   13/    139E :  (MACRO-2)                   CheckedChannelPointer CNZ_PSG1
(1)   13/    139E : =>TRUE                       if SonicDriverVer<>1
(1)   13/    139E : FF18                                dc.w    z80_ptr(CNZ_PSG1)
(1)   13/    13A0 : =>FALSE                      else
(1)   13/    13A0 :                                     if MOMPASS>1
(1)   13/    13A0 :                                             if CNZ_PSG1<songStart
(1)   13/    13A0 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/    13A0 : [13]                                         endif
(1)   13/    13A0 : [13]                                 endif
(1)   13/    13A0 :                                     dc.w    CNZ_PSG1-songStart
(1)   13/    13A0 : [13]                         endif
(1)   13/    13A0 :  (MACRO-2)                   PSGPitchConvert $DC
(1)   13/    13A0 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/    13A0 :                                     dc.b    ($DC+psgdelta)&$FF
(1)   13/    13A0 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/    13A0 :                                     dc.b    ($DC-psgdelta)&$FF
(1)   13/    13A0 : =>TRUE                       else
(1)   13/    13A0 : DC                                  dc.b    $DC
(1)   13/    13A1 : [13]                         endif
(1)   13/    13A1 : 05                          dc.b    $05
(1)   13/    13A2 :                             ; Frequency envelope
(1)   13/    13A2 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/    13A2 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/    13A2 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/    13A2 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/    13A2 :                                     dc.b    0
(1)   13/    13A2 : =>TRUE                       else
(1)   13/    13A2 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/    13A2 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/    13A2 : [13]                                 endif
(1)   13/    13A2 : 00                                  dc.b    $00
(1)   13/    13A3 : [13]                         endif
(1)   13/    13A3 :                             ; Volume envelope
(1)   13/    13A3 : 00                          dc.b    $00
(1)   14/    13A4 : (MACRO)              	smpsHeaderPSG       CNZ_PSG2,	$DC, $05, $00, $00
(1)   14/    13A4 :  (MACRO-2)                   CheckedChannelPointer CNZ_PSG2
(1)   14/    13A4 : =>TRUE                       if SonicDriverVer<>1
(1)   14/    13A4 : 6819                                dc.w    z80_ptr(CNZ_PSG2)
(1)   14/    13A6 : =>FALSE                      else
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 20 - 4/3/2023 13:9:54


(1)   14/    13A6 :                                     if MOMPASS>1
(1)   14/    13A6 :                                             if CNZ_PSG2<songStart
(1)   14/    13A6 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/    13A6 : [14]                                         endif
(1)   14/    13A6 : [14]                                 endif
(1)   14/    13A6 :                                     dc.w    CNZ_PSG2-songStart
(1)   14/    13A6 : [14]                         endif
(1)   14/    13A6 :  (MACRO-2)                   PSGPitchConvert $DC
(1)   14/    13A6 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/    13A6 :                                     dc.b    ($DC+psgdelta)&$FF
(1)   14/    13A6 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/    13A6 :                                     dc.b    ($DC-psgdelta)&$FF
(1)   14/    13A6 : =>TRUE                       else
(1)   14/    13A6 : DC                                  dc.b    $DC
(1)   14/    13A7 : [14]                         endif
(1)   14/    13A7 : 05                          dc.b    $05
(1)   14/    13A8 :                             ; Frequency envelope
(1)   14/    13A8 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/    13A8 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/    13A8 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/    13A8 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/    13A8 :                                     dc.b    0
(1)   14/    13A8 : =>TRUE                       else
(1)   14/    13A8 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/    13A8 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/    13A8 : [14]                                 endif
(1)   14/    13A8 : 00                                  dc.b    $00
(1)   14/    13A9 : [14]                         endif
(1)   14/    13A9 :                             ; Volume envelope
(1)   14/    13A9 : 00                          dc.b    $00
(1)   15/    13AA : (MACRO)              	smpsHeaderPSG       CNZ_PSG3,	$00, $04, $00, $00
(1)   15/    13AA :  (MACRO-2)                   CheckedChannelPointer CNZ_PSG3
(1)   15/    13AA : =>TRUE                       if SonicDriverVer<>1
(1)   15/    13AA : D319                                dc.w    z80_ptr(CNZ_PSG3)
(1)   15/    13AC : =>FALSE                      else
(1)   15/    13AC :                                     if MOMPASS>1
(1)   15/    13AC :                                             if CNZ_PSG3<songStart
(1)   15/    13AC :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/    13AC : [15]                                         endif
(1)   15/    13AC : [15]                                 endif
(1)   15/    13AC :                                     dc.w    CNZ_PSG3-songStart
(1)   15/    13AC : [15]                         endif
(1)   15/    13AC :  (MACRO-2)                   PSGPitchConvert $00
(1)   15/    13AC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/    13AC :                                     dc.b    ($00+psgdelta)&$FF
(1)   15/    13AC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/    13AC :                                     dc.b    ($00-psgdelta)&$FF
(1)   15/    13AC : =>TRUE                       else
(1)   15/    13AC : 00                                  dc.b    $00
(1)   15/    13AD : [15]                         endif
(1)   15/    13AD : 04                          dc.b    $04
(1)   15/    13AE :                             ; Frequency envelope
(1)   15/    13AE : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/    13AE :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/    13AE :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/    13AE :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/    13AE :                                     dc.b    0
(1)   15/    13AE : =>TRUE                       else
(1)   15/    13AE : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/    13AE :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 21 - 4/3/2023 13:9:54


(1)   15/    13AE : [15]                                 endif
(1)   15/    13AE : 00                                  dc.b    $00
(1)   15/    13AF : [15]                         endif
(1)   15/    13AF :                             ; Volume envelope
(1)   15/    13AF : 00                          dc.b    $00
(1)   16/    13B0 :                     
(1)   17/    13B0 :                     ; FM1 Data
(1)   18/    13B0 :                     CNZ_FM1:
(1)   19/    13B0 : (MACRO)              	smpsSetvoice        $00
(1)   19/    13B0 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/    13B0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/    13B0 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/    13B0 : =>TRUE                       else
(1)   19/    13B0 : EF00                                dc.b    $EF,$00
(1)   19/    13B2 : [19]                         endif
(1)   20/    13B2 : 8018                	dc.b	nRst, $18
(1)   21/    13B4 :                     
(1)   22/    13B4 :                     CNZ_Jump04:
(1)   23/    13B4 : A506 99A5 99A5      	dc.b	nC3, $06, nC2, nC3, nC2, nC3, nC2, nC3, nC2, nRst, nG1, $04
             13BA : 99A5 9980 9404    
(1)   24/    13C0 : 8002 9704 9506      	dc.b	nRst, $02, nBb1, $04, nAb1, $06, nG1, $04, nRst, $02, nG2, $02
             13C6 : 9404 8002 A002    
(1)   25/    13CC : 9406 9698 9906      	dc.b	nG1, $06, nA1, nB1, nC2, $06, nB1, nA1, nG1, nC2, nG1, nC2
             13D2 : 9896 9499 9499    
(1)   26/    13D8 : 9B9D 9B99 9891      	dc.b	nD2, nE2, nD2, nC2, nB1, nE1, nFs1, nAb1, nE1, nA1, nA1, nE2
             13DE : 9395 9196 969D    
(1)   27/    13E4 : 9D96 9899 9695      	dc.b	nE2, nA1, nB1, nC2, nA1, nAb1, nBb1, nC2, nD2, nEb2, $04, $02
             13EA : 9799 9B9C 0402    
(1)   28/    13F0 : 9506 9995 9999      	dc.b	nAb1, $06, nC2, nAb1, nC2, nC2, nD2, nEb2, nE2, $04, $02, nE1
             13F6 : 9B9C 9D04 0291    
(1)   29/    13FC : 0693 9596 9694      	dc.b	$06, nFs1, nAb1, nA1, nA1, nG1, nG1, nF1, nC2, nF1, nA1, nRst
             1402 : 9492 9992 9680    
(1)   30/    1408 : 9980 9980 9E80      	dc.b	nC2, nRst, nC2, nRst, nF2, nRst, nF2, nAb1, $0C, $06, nRst, $04
             140E : 9E95 0C06 8004    
(1)   31/    1414 : 9404 8002 A09E      	dc.b	nG1, $04, nRst, $02, nG2, nF2, $06, nE2, nD2, nC2, $04, $02
             141A : 069D 9B99 0402    
(1)   32/    1420 : 9106 9293 9498      	dc.b	nE1, $06, nF1, nFs1, nG1, nB1, nC2, nD2, nE2, nB1, nAb1, nFs1
             1426 : 999B 9D98 9593    
(1)   33/    142C : 9198 9D91 9698      	dc.b	nE1, nB1, nE2, nE1, nA1, nB1, nC2, nB1, nA1, nC2, nE2, nA1
             1432 : 9998 9699 9D96    
(1)   34/    1438 : 9597 9997 9596      	dc.b	nAb1, nBb1, nC2, nBb1, nAb1, nA1, nBb1, nB1, nC2, nB1, nC2, nD2
             143E : 9798 9998 999B    
(1)   35/    1444 : 9D04 0298 0691      	dc.b	nE2, $04, $02, nB1, $06, nE1, nAb1, nA1, nB1, nC2, nE2, nF2
             144A : 9596 9899 9D9E    
(1)   36/    1450 : 0496 0897 0698      	dc.b	$04, nA1, $08, nBb1, $06, nB1, nRst, nC2, nRst, nC2, nRst, nF2
             1456 : 8099 8099 809E    
(1)   37/    145C : 809E                	dc.b	nRst, nF2
(1)   38/    145E : (MACRO)              	smpsAlterVol        $04
(1)   38/    145E : E604                        dc.b    $E6,$04
(1)   39/    1460 : 8099 8099 809E      	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2
             1466 : 809E             
(1)   40/    1468 : (MACRO)              	smpsAlterVol        $FC
(1)   40/    1468 : E6FC                        dc.b    $E6,$FC
(1)   41/    146A : 8099 8099 809E      	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2, $04, nC2, $02, nRst
             1470 : 809E 0499 0280    
(1)   42/    1476 : 1899 0280 9998      	dc.b	$18, nC2, $02, nRst, nC2, nB1, $06, nA1, nG1
             147C : 0696 94          
(1)   43/    147F : (MACRO)              	smpsJump            CNZ_Jump04
(1)   43/    147F : F6                          dc.b    $F6
(1)   43/    1480 : =>TRUE                       if SonicDriverVer<>1
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 22 - 4/3/2023 13:9:54


(1)   43/    1480 : B413                                dc.w    z80_ptr(CNZ_Jump04)
(1)   43/    1482 : =>FALSE                      else
(1)   43/    1482 :                                     dc.w    CNZ_Jump04-*-1
(1)   43/    1482 : [43]                         endif
(1)   44/    1482 :                     
(1)   45/    1482 :                     ; FM3 Data
(1)   46/    1482 :                     CNZ_FM3:
(1)   47/    1482 : (MACRO)              	smpsSetvoice        $02
(1)   47/    1482 :  (MACRO-2)                   smpsFMvoice $02
(1)   47/    1482 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   47/    1482 :                                     dc.b    $EF,$02|$80,+$81
(1)   47/    1482 : =>TRUE                       else
(1)   47/    1482 : EF02                                dc.b    $EF,$02
(1)   47/    1484 : [47]                         endif
(1)   48/    1484 : (MACRO)              	smpsPan             panLeft, $00
(1)   48/    1484 : =$0                  panNone set $00
(1)   48/    1484 : =$40                 panRight set $40
(1)   48/    1484 : =$80                 panLeft set $80
(1)   48/    1484 : =$C0                 panCentre set $C0
(1)   48/    1484 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   48/    1484 : E080                        dc.b $E0,panLeft+$00
(1)   49/    1486 : 8018                	dc.b	nRst, $18
(1)   50/    1488 :                     
(1)   51/    1488 :                     CNZ_Jump03:
(1)   52/    1488 : (MACRO)              	smpsSetvoice        $02
(1)   52/    1488 :  (MACRO-2)                   smpsFMvoice $02
(1)   52/    1488 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   52/    1488 :                                     dc.b    $EF,$02|$80,+$81
(1)   52/    1488 : =>TRUE                       else
(1)   52/    1488 : EF02                                dc.b    $EF,$02
(1)   52/    148A : [52]                         endif
(1)   53/    148A : 8006 C480 C480      	dc.b	nRst, $06, nG5, nRst, nG5, nRst, nG5, nRst, nG5, nRst, nF5, $02
             1490 : C480 C480 C202    
(1)   54/    1496 : 8004 C204 0280      	dc.b	nRst, $04, nF5, $04, $02, nRst, $04, nF5, $02, nRst, $18
             149C : 04C2 0280 18       
(1)   55/    14A1 : (MACRO)              	smpsCall            CNZ_Call02
(1)   55/    14A1 : F8                          dc.b    $F8
(1)   55/    14A2 : =>TRUE                       if SonicDriverVer<>1
(1)   55/    14A2 : DF14                                dc.w    z80_ptr(CNZ_Call02)
(1)   55/    14A4 : =>FALSE                      else
(1)   55/    14A4 :                                     dc.w    CNZ_Call02-*-1
(1)   55/    14A4 : [55]                         endif
(1)   56/    14A4 : (MACRO)              	smpsSetvoice        $01
(1)   56/    14A4 :  (MACRO-2)                   smpsFMvoice $01
(1)   56/    14A4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   56/    14A4 :                                     dc.b    $EF,$01|$80,+$81
(1)   56/    14A4 : =>TRUE                       else
(1)   56/    14A4 : EF01                                dc.b    $EF,$01
(1)   56/    14A6 : [56]                         endif
(1)   57/    14A6 : (MACRO)              	smpsAlterPitch      $F4
(1)   57/    14A6 :  (MACRO-2)                   smpsChangeTransposition $F4
(1)   57/    14A6 : =>FALSE                      if SonicDriverVer>=3
(1)   57/    14A6 :                                     dc.b    $FB,$F4
(1)   57/    14A6 : =>TRUE                       else
(1)   57/    14A6 : E9F4                                dc.b    $E9,$F4
(1)   57/    14A8 : [57]                         endif
(1)   58/    14A8 : (MACRO)              	smpsAlterVol        $FC
(1)   58/    14A8 : E6FC                        dc.b    $E6,$FC
(1)   59/    14AA : (MACRO)              	smpsCall            CNZ_Call03
(1)   59/    14AA : F8                          dc.b    $F8
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 23 - 4/3/2023 13:9:54


(1)   59/    14AB : =>TRUE                       if SonicDriverVer<>1
(1)   59/    14AB : 6F15                                dc.w    z80_ptr(CNZ_Call03)
(1)   59/    14AD : =>FALSE                      else
(1)   59/    14AD :                                     dc.w    CNZ_Call03-*-1
(1)   59/    14AD : [59]                         endif
(1)   60/    14AD : CD18 CB0C CD06      	dc.b	nE6, $18, nD6, $0C, nE6, $06, nD6, nC6, $18, nF6, nRst, $06
             14B3 : CBC9 18CE 8006    
(1)   61/    14B9 : C480 C480 C680 C6   	dc.b	nG5, nRst, nG5, nRst, nA5, nRst, nA5
(1)   62/    14C0 : (MACRO)              	smpsAlterVol        $04
(1)   62/    14C0 : E604                        dc.b    $E6,$04
(1)   63/    14C2 : 80C4 80C4 80C6      	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, nRst, nA5
             14C8 : 80C6             
(1)   64/    14CA : (MACRO)              	smpsAlterVol        $FC
(1)   64/    14CA : E6FC                        dc.b    $E6,$FC
(1)   65/    14CC : 80C4 80C4 80C6      	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, $0C, $04, nG5, $02, nRst, $30
             14D2 : 0C04 C402 8030    
(1)   66/    14D8 : (MACRO)              	smpsAlterPitch      $0C
(1)   66/    14D8 :  (MACRO-2)                   smpsChangeTransposition $0C
(1)   66/    14D8 : =>FALSE                      if SonicDriverVer>=3
(1)   66/    14D8 :                                     dc.b    $FB,$0C
(1)   66/    14D8 : =>TRUE                       else
(1)   66/    14D8 : E90C                                dc.b    $E9,$0C
(1)   66/    14DA : [66]                         endif
(1)   67/    14DA : (MACRO)              	smpsAlterVol        $04
(1)   67/    14DA : E604                        dc.b    $E6,$04
(1)   68/    14DC : (MACRO)              	smpsJump            CNZ_Jump03
(1)   68/    14DC : F6                          dc.b    $F6
(1)   68/    14DD : =>TRUE                       if SonicDriverVer<>1
(1)   68/    14DD : 8814                                dc.w    z80_ptr(CNZ_Jump03)
(1)   68/    14DF : =>FALSE                      else
(1)   68/    14DF :                                     dc.w    CNZ_Jump03-*-1
(1)   68/    14DF : [68]                         endif
(1)   69/    14DF :                     
(1)   70/    14DF :                     CNZ_Call02:
(1)   71/    14DF : 8006 B802 8008      	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nG4, $08
             14E5 : B802 8006 B808    
(1)   72/    14EB : 8002 B806 8002      	dc.b	nRst, $02, nG4, $06, nRst, $02, nG4, $04, $02, nRst, $06, nAb4
             14F1 : B804 0280 06B9    
(1)   73/    14F7 : 0280 08B9 0280      	dc.b	$02, nRst, $08, nAb4, $02, nRst, $06, nAb4, $08, nRst, $02, nAb4
             14FD : 06B9 0880 02B9    
(1)   74/    1503 : 0680 02B9 0402      	dc.b	$06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4, $02, nRst, $08
             1509 : 8006 BA02 8008    
(1)   75/    150F : BA02 8006 BA08      	dc.b	nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4, $06, nRst, $02
             1515 : 8002 BA06 8002    
(1)   76/    151B : BA04 0280 06B9      	dc.b	nA4, $04, $02, nRst, $06, nAb4, $02, nRst, $08, nAb4, $02, nRst
             1521 : 0280 08B9 0280    
(1)   77/    1527 : 06B9 0880 02B9      	dc.b	$06, nAb4, $08, nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02
             152D : 0680 02B9 0402    
(1)   78/    1533 : 8006 B802 8008      	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nAb4, $08
             1539 : B802 8006 B908    
(1)   79/    153F : 8002 B906 8002      	dc.b	nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4
             1545 : B904 0280 06BA    
(1)   80/    154B : 0280 08BA 0280      	dc.b	$02, nRst, $08, nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4
             1551 : 06BA 0880 02BA    
(1)   81/    1557 : 0680 02BA 0402      	dc.b	$06, nRst, $02, nA4, $04, $02, nRst, $06, nG4, nRst, nG4, nRst
             155D : 8006 B880 B880    
(1)   82/    1563 : BA80 BABD 0C06      	dc.b	nA4, nRst, nA4, nC5, $0C, $06, $04, nB4, $02, nRst, $18
             1569 : 04BC 0280 18       
(1)   83/    156E : (MACRO)              	smpsReturn
(1)   83/    156E : =>FALSE                      if SonicDriverVer>=3
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 24 - 4/3/2023 13:9:54


(1)   83/    156E :                                     dc.b    $F9
(1)   83/    156E : =>TRUE                       else
(1)   83/    156E : E3                                  dc.b    $E3
(1)   83/    156F : [83]                         endif
(1)   84/    156F :                     
(1)   85/    156F :                     CNZ_Call03:
(1)   86/    156F : 8006 CD02 8008      	dc.b	nRst, $06, nE6, $02, nRst, $08, nE6, $02, nRst, $06, nE6, $06
             1575 : CD02 8006 CD06    
(1)   87/    157B : CE04 CD02 800C      	dc.b	nF6, $04, nE6, $02, nRst, $0C, nRst, $06, nD6, $02, nRst, $08
             1581 : 8006 CB02 8008    
(1)   88/    1587 : CB02 8006 CB06      	dc.b	nD6, $02, nRst, $06, nD6, $06, nE6, $04, nD6, $02, nRst, $0C
             158D : CD04 CB02 800C    
(1)   89/    1593 : 8006 C902 8008      	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
             1599 : C902 8006 C906    
(1)   90/    159F : CB04 C902 800C      	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nC6, $02, nRst, $08
             15A5 : 8006 C902 8008    
(1)   91/    15AB : C902 8006 C906      	dc.b	nC6, $02, nRst, $06, nC6, $06, nD6, $04, nC6, $02, nRst, $0C
             15B1 : CB04 C902 800C    
(1)   92/    15B7 : (MACRO)              	smpsReturn
(1)   92/    15B7 : =>FALSE                      if SonicDriverVer>=3
(1)   92/    15B7 :                                     dc.b    $F9
(1)   92/    15B7 : =>TRUE                       else
(1)   92/    15B7 : E3                                  dc.b    $E3
(1)   92/    15B8 : [92]                         endif
(1)   93/    15B8 :                     
(1)   94/    15B8 :                     ; FM4 Data
(1)   95/    15B8 :                     CNZ_FM4:
(1)   96/    15B8 : (MACRO)              	smpsSetvoice        $02
(1)   96/    15B8 :  (MACRO-2)                   smpsFMvoice $02
(1)   96/    15B8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   96/    15B8 :                                     dc.b    $EF,$02|$80,+$81
(1)   96/    15B8 : =>TRUE                       else
(1)   96/    15B8 : EF02                                dc.b    $EF,$02
(1)   96/    15BA : [96]                         endif
(1)   97/    15BA : (MACRO)              	smpsPan             panRight, $00
(1)   97/    15BA : =$0                  panNone set $00
(1)   97/    15BA : =$40                 panRight set $40
(1)   97/    15BA : =$80                 panLeft set $80
(1)   97/    15BA : =$C0                 panCentre set $C0
(1)   97/    15BA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   97/    15BA : E040                        dc.b $E0,panRight+$00
(1)   98/    15BC : 8018                	dc.b	nRst, $18
(1)   99/    15BE :                     
(1)  100/    15BE :                     CNZ_Jump02:
(1)  101/    15BE : (MACRO)              	smpsSetvoice        $02
(1)  101/    15BE :  (MACRO-2)                   smpsFMvoice $02
(1)  101/    15BE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  101/    15BE :                                     dc.b    $EF,$02|$80,+$81
(1)  101/    15BE : =>TRUE                       else
(1)  101/    15BE : EF02                                dc.b    $EF,$02
(1)  101/    15C0 : [101]                        endif
(1)  102/    15C0 : 8006 C080 C080      	dc.b	nRst, $06, nEb5, nRst, nEb5, nRst, nEb5, nRst, nEb5, nRst, nD5, $02
             15C6 : C080 C080 BF02    
(1)  103/    15CC : 8004 BF04 0280      	dc.b	nRst, $04, nD5, $04, $02, nRst, $04, nD5, $02, nRst, $18
             15D2 : 04BF 0280 18       
(1)  104/    15D7 : (MACRO)              	smpsCall            CNZ_Call00
(1)  104/    15D7 : F8                          dc.b    $F8
(1)  104/    15D8 : =>TRUE                       if SonicDriverVer<>1
(1)  104/    15D8 : 1516                                dc.w    z80_ptr(CNZ_Call00)
(1)  104/    15DA : =>FALSE                      else
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 25 - 4/3/2023 13:9:54


(1)  104/    15DA :                                     dc.w    CNZ_Call00-*-1
(1)  104/    15DA : [104]                        endif
(1)  105/    15DA : (MACRO)              	smpsSetvoice        $01
(1)  105/    15DA :  (MACRO-2)                   smpsFMvoice $01
(1)  105/    15DA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  105/    15DA :                                     dc.b    $EF,$01|$80,+$81
(1)  105/    15DA : =>TRUE                       else
(1)  105/    15DA : EF01                                dc.b    $EF,$01
(1)  105/    15DC : [105]                        endif
(1)  106/    15DC : (MACRO)              	smpsAlterPitch      $F4
(1)  106/    15DC :  (MACRO-2)                   smpsChangeTransposition $F4
(1)  106/    15DC : =>FALSE                      if SonicDriverVer>=3
(1)  106/    15DC :                                     dc.b    $FB,$F4
(1)  106/    15DC : =>TRUE                       else
(1)  106/    15DC : E9F4                                dc.b    $E9,$F4
(1)  106/    15DE : [106]                        endif
(1)  107/    15DE : (MACRO)              	smpsAlterVol        $FC
(1)  107/    15DE : E6FC                        dc.b    $E6,$FC
(1)  108/    15E0 : (MACRO)              	smpsCall            CNZ_Call01
(1)  108/    15E0 : F8                          dc.b    $F8
(1)  108/    15E1 : =>TRUE                       if SonicDriverVer<>1
(1)  108/    15E1 : 8016                                dc.w    z80_ptr(CNZ_Call01)
(1)  108/    15E3 : =>FALSE                      else
(1)  108/    15E3 :                                     dc.w    CNZ_Call01-*-1
(1)  108/    15E3 : [108]                        endif
(1)  109/    15E3 : C918 C80C C906      	dc.b	nC6, $18, nB5, $0C, nC6, $06, nB5, nA5, $18, nC6, nRst, $06
             15E9 : C8C6 18C9 8006    
(1)  110/    15EF : C180 C180 C280 C2   	dc.b	nE5, nRst, nE5, nRst, nF5, nRst, nF5
(1)  111/    15F6 : (MACRO)              	smpsAlterVol        $04
(1)  111/    15F6 : E604                        dc.b    $E6,$04
(1)  112/    15F8 : 80C1 80C1 80C2      	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, nRst, nF5
             15FE : 80C2             
(1)  113/    1600 : (MACRO)              	smpsAlterVol        $FC
(1)  113/    1600 : E6FC                        dc.b    $E6,$FC
(1)  114/    1602 : 80C1 80C1 80C2      	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, $0C, $04, nE5, $02, nRst, $30
             1608 : 0C04 C102 8030    
(1)  115/    160E : (MACRO)              	smpsAlterPitch      $0C
(1)  115/    160E :  (MACRO-2)                   smpsChangeTransposition $0C
(1)  115/    160E : =>FALSE                      if SonicDriverVer>=3
(1)  115/    160E :                                     dc.b    $FB,$0C
(1)  115/    160E : =>TRUE                       else
(1)  115/    160E : E90C                                dc.b    $E9,$0C
(1)  115/    1610 : [115]                        endif
(1)  116/    1610 : (MACRO)              	smpsAlterVol        $04
(1)  116/    1610 : E604                        dc.b    $E6,$04
(1)  117/    1612 : (MACRO)              	smpsJump            CNZ_Jump02
(1)  117/    1612 : F6                          dc.b    $F6
(1)  117/    1613 : =>TRUE                       if SonicDriverVer<>1
(1)  117/    1613 : BE15                                dc.w    z80_ptr(CNZ_Jump02)
(1)  117/    1615 : =>FALSE                      else
(1)  117/    1615 :                                     dc.w    CNZ_Jump02-*-1
(1)  117/    1615 : [117]                        endif
(1)  118/    1615 :                     
(1)  119/    1615 :                     CNZ_Call00:
(1)  120/    1615 : 8006 B502 8008      	dc.b	nRst, $06, nE4, $02, nRst, $08, nE4, $02, nRst, $06, nE4, $08
             161B : B502 8006 B508    
(1)  121/    1621 : 8002 B506 8002      	dc.b	nRst, $02, nE4, $06, nRst, $02, nE4, $04, $02
             1627 : B504 02          
(1)  122/    162A : (MACRO)              	smpsLoop            $00, $03, CNZ_Call00
(1)  122/    162A : F7                          dc.b    $F7
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 26 - 4/3/2023 13:9:54


(1)  122/    162B : 0003                        dc.b    $00,$03
(1)  122/    162D : =>TRUE                       if SonicDriverVer<>1
(1)  122/    162D : 1516                                dc.w    z80_ptr(CNZ_Call00)
(1)  122/    162F : =>FALSE                      else
(1)  122/    162F :                                     dc.w    CNZ_Call00-*-1
(1)  122/    162F : [122]                        endif
(1)  123/    162F : 8006 B402 8008      	dc.b	nRst, $06, nEb4, $02, nRst, $08, nEb4, $02, nRst, $06, nEb4, $08
             1635 : B402 8006 B408    
(1)  124/    163B : 8002 B406 8002      	dc.b	nRst, $02, nEb4, $06, nRst, $02, nEb4, $04, $02, nRst, $06, nE4
             1641 : B404 0280 06B5    
(1)  125/    1647 : 0280 08B5 0280      	dc.b	$02, nRst, $08, nE4, $02, nRst, $06, nE4, $08, nRst, $02, nE4
             164D : 06B5 0880 02B5    
(1)  126/    1653 : 0680 02B5 0402      	dc.b	$06, nRst, $02, nE4, $04, $02, nRst, $06, nE4, $02, nRst, $08
             1659 : 8006 B502 8008    
(1)  127/    165F : B502 8006 B608      	dc.b	nE4, $02, nRst, $06, nF4, $08, nRst, $02, nF4, $06, nRst, $02
             1665 : 8002 B606 8002    
(1)  128/    166B : B604 0280 06B5      	dc.b	nF4, $04, $02, nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
             1671 : 80B5 80B6 80B6    
(1)  129/    1677 : B90C 0604 B802      	dc.b	nAb4, $0C, $06, $04, nG4, $02, nRst, $18
             167D : 8018             
(1)  130/    167F : (MACRO)              	smpsReturn
(1)  130/    167F : =>FALSE                      if SonicDriverVer>=3
(1)  130/    167F :                                     dc.b    $F9
(1)  130/    167F : =>TRUE                       else
(1)  130/    167F : E3                                  dc.b    $E3
(1)  130/    1680 : [130]                        endif
(1)  131/    1680 :                     
(1)  132/    1680 :                     CNZ_Call01:
(1)  133/    1680 : 8006 C902 8008      	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
             1686 : C902 8006 C906    
(1)  134/    168C : CB04 C902 800C      	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nB5, $02, nRst, $08
             1692 : 8006 C802 8008    
(1)  135/    1698 : C802 8006 C806      	dc.b	nB5, $02, nRst, $06, nB5, $06, nC6, $04, nB5, $02, nRst, $0C
             169E : C904 C802 800C    
(1)  136/    16A4 : 8006 C602 8008      	dc.b	nRst, $06, nA5, $02, nRst, $08, nA5, $02, nRst, $06, nA5, $06
             16AA : C602 8006 C606    
(1)  137/    16B0 : C804 C602 800C      	dc.b	nB5, $04, nA5, $02, nRst, $0C, nRst, $06, nAb5, $02, nRst, $08
             16B6 : 8006 C502 8008    
(1)  138/    16BC : C502 8006 C506      	dc.b	nAb5, $02, nRst, $06, nAb5, $06, nBb5, $04, nAb5, $02, nRst, $0C
             16C2 : C704 C502 800C    
(1)  139/    16C8 : (MACRO)              	smpsReturn
(1)  139/    16C8 : =>FALSE                      if SonicDriverVer>=3
(1)  139/    16C8 :                                     dc.b    $F9
(1)  139/    16C8 : =>TRUE                       else
(1)  139/    16C8 : E3                                  dc.b    $E3
(1)  139/    16C9 : [139]                        endif
(1)  140/    16C9 :                     
(1)  141/    16C9 :                     ; FM2 Data
(1)  142/    16C9 :                     CNZ_FM2:
(1)  143/    16C9 : (MACRO)              	smpsSetvoice        $01
(1)  143/    16C9 :  (MACRO-2)                   smpsFMvoice $01
(1)  143/    16C9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  143/    16C9 :                                     dc.b    $EF,$01|$80,+$81
(1)  143/    16C9 : =>TRUE                       else
(1)  143/    16C9 : EF01                                dc.b    $EF,$01
(1)  143/    16CB : [143]                        endif
(1)  144/    16CB : (MACRO)              	smpsModSet          $1C, $01, $06, $04
(1)  144/    16CB : F0                          dc.b    $F0
(1)  144/    16CC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  144/    16CC :                                     dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 27 - 4/3/2023 13:9:54


(1)  144/    16CC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  144/    16CC :                                     dc.b    $1C-1,$01,$06,conv0To256($04)/conv0To256($01)-1
(1)  144/    16CC : =>TRUE                       else
(1)  144/    16CC : 1C01 0604                           dc.b    $1C,$01,$06,$04
(1)  144/    16D0 : [144]                        endif
(1)  144/    16D0 :                             ;dc.b   $01,$06,$04
(1)  145/    16D0 : 8018                	dc.b	nRst, $18
(1)  146/    16D2 :                     
(1)  147/    16D2 :                     CNZ_Jump01:
(1)  148/    16D2 : (MACRO)              	smpsSetvoice        $01
(1)  148/    16D2 :  (MACRO-2)                   smpsFMvoice $01
(1)  148/    16D2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  148/    16D2 :                                     dc.b    $EF,$01|$80,+$81
(1)  148/    16D2 : =>TRUE                       else
(1)  148/    16D2 : EF01                                dc.b    $EF,$01
(1)  148/    16D4 : [148]                        endif
(1)  149/    16D4 : 8006 C00C BD02      	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
             16DA : 8004 C3C2 0280    
(1)  150/    16E0 : 04C0 0280 04BD      	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
             16E6 : 0880 06B8 0280    
(1)  151/    16EC : 04BB B902 8004      	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $0C, nE4, $04
             16F2 : B802 800C B504    
(1)  152/    16F8 : 8002 B504 8002      	dc.b	nRst, $02, nE4, $04, nRst, $02, nE4, $18, nRst, $06, nE4, $04
             16FE : B518 8006 B504    
(1)  153/    1704 : 8002 B604 B508      	dc.b	nRst, $02, nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4
             170A : B904 0280 04B5    
(1)  154/    1710 : 1A80 06B5 BA04      	dc.b	$1A, nRst, $06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4
             1716 : 0280 04B5 02B1    
(1)  155/    171C : 1280 06B1 0480      	dc.b	$12, nRst, $06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4
             1722 : 02B3 04B1 02B4    
(1)  156/    1728 : 06B3 04B1 2680      	dc.b	$06, nD4, $04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4
             172E : 06B5 0480 02B6    
(1)  157/    1734 : 0480 02B5 0480      	dc.b	$04, nRst, $02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04
             173A : 02B9 0402 8004    
(1)  158/    1740 : B50E 8006 BA0C      	dc.b	nE4, $0E, nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C
             1746 : BC04 BA02 BD0C    
(1)  159/    174C : 8006 BA02 8004      	dc.b	nRst, $06, nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, nEb4
             1752 : B80C B5B1 B3B4    
(1)  160/    1758 : B604 B402 B604      	dc.b	nF4, $04, nEb4, $02, nF4, $04, nG4, $02, nRst, $10, nG3, $02
             175E : B802 8010 AC02    
(1)  161/    1764 : AE04 B102 B518      	dc.b	nA3, $04, nC4, $02, nE4, $18, nRst, $06, nE4, $04, nRst, $02
             176A : 8006 B504 8002    
(1)  162/    1770 : B604 B508 B904      	dc.b	nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4, $1A, nRst
             1776 : 0280 04B5 1A80    
(1)  163/    177C : 06B5 BA04 0280      	dc.b	$06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4, $12, nRst
             1782 : 04B5 02B1 1280    
(1)  164/    1788 : 06B1 0480 02B3      	dc.b	$06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4, $06, nD4
             178E : 04B1 02B4 06B3    
(1)  165/    1794 : 04B1 2680 06B5      	dc.b	$04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4, $04, nRst
             179A : 0480 02B6 0480    
(1)  166/    17A0 : 02B5 0480 02B9      	dc.b	$02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04, nE4, $0E
             17A6 : 0402 8004 B50E    
(1)  167/    17AC : 8006 BA0C BC04      	dc.b	nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C, nRst, $06
             17B2 : BA02 BD0C 8006    
(1)  168/    17B8 : BA02 8004 B80C      	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
             17BE : B5B1 B306          
(1)  169/    17C2 : (MACRO)              	smpsAlterVol        $04
(1)  169/    17C2 : E604                        dc.b    $E6,$04
(1)  170/    17C4 : BA02 8004 B80C      	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
             17CA : B5B1 B306          
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 28 - 4/3/2023 13:9:54


(1)  171/    17CE : (MACRO)              	smpsAlterVol        $FC
(1)  171/    17CE : E6FC                        dc.b    $E6,$FC
(1)  172/    17D0 : BA02 8004 B80C      	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $0A, nC4, $02
             17D6 : B5B1 B30A B102    
(1)  173/    17DC : 8030                	dc.b	nRst, $30
(1)  174/    17DE : (MACRO)              	smpsJump            CNZ_Jump01
(1)  174/    17DE : F6                          dc.b    $F6
(1)  174/    17DF : =>TRUE                       if SonicDriverVer<>1
(1)  174/    17DF : D216                                dc.w    z80_ptr(CNZ_Jump01)
(1)  174/    17E1 : =>FALSE                      else
(1)  174/    17E1 :                                     dc.w    CNZ_Jump01-*-1
(1)  174/    17E1 : [174]                        endif
(1)  175/    17E1 :                     
(1)  176/    17E1 :                     ; FM5 Data
(1)  177/    17E1 :                     CNZ_FM5:
(1)  178/    17E1 : (MACRO)              	smpsSetvoice        $01
(1)  178/    17E1 :  (MACRO-2)                   smpsFMvoice $01
(1)  178/    17E1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  178/    17E1 :                                     dc.b    $EF,$01|$80,+$81
(1)  178/    17E1 : =>TRUE                       else
(1)  178/    17E1 : EF01                                dc.b    $EF,$01
(1)  178/    17E3 : [178]                        endif
(1)  179/    17E3 : 8018                	dc.b	nRst, $18
(1)  180/    17E5 : (MACRO)              	smpsModSet          $1C, $01, $06, $04
(1)  180/    17E5 : F0                          dc.b    $F0
(1)  180/    17E6 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  180/    17E6 :                                     dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
(1)  180/    17E6 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  180/    17E6 :                                     dc.b    $1C-1,$01,$06,conv0To256($04)/conv0To256($01)-1
(1)  180/    17E6 : =>TRUE                       else
(1)  180/    17E6 : 1C01 0604                           dc.b    $1C,$01,$06,$04
(1)  180/    17EA : [180]                        endif
(1)  180/    17EA :                             ;dc.b   $01,$06,$04
(1)  181/    17EA :                     
(1)  182/    17EA :                     CNZ_Jump00:
(1)  183/    17EA : (MACRO)              	smpsSetvoice        $01
(1)  183/    17EA :  (MACRO-2)                   smpsFMvoice $01
(1)  183/    17EA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  183/    17EA :                                     dc.b    $EF,$01|$80,+$81
(1)  183/    17EA : =>TRUE                       else
(1)  183/    17EA : EF01                                dc.b    $EF,$01
(1)  183/    17EC : [183]                        endif
(1)  184/    17EC : 8006 BD0C B802      	dc.b	nRst, $06, nC5, $0C, nG4, $02, nRst, $04, nEb5, nD5, $02, nRst
             17F2 : 8004 C0BF 0280    
(1)  185/    17F8 : 04BD 0280 04B8      	dc.b	$04, nC5, $02, nRst, $04, nG4, $08, nRst, $06, nD4, $02, nRst
             17FE : 0880 06B3 0280    
(1)  186/    1804 : 04B6 B402 8004      	dc.b	$04, nF4, nEb4, $02, nRst, $04, nD4, $02, nRst, $0C, nA3, $04
             180A : B302 800C AE04    
(1)  187/    1810 : 8002 B004 8002      	dc.b	nRst, $02, nB3, $04, nRst, $02, nC4, $18, nRst, $06, nC4, $04
             1816 : B118 8006 B104    
(1)  188/    181C : 8002 B304 B108      	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
             1822 : B504 B502 8004    
(1)  189/    1828 : B01A 8006 B0B5      	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
             182E : 0402 8004 B102    
(1)  190/    1834 : AE12 8006 AE04      	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
             183A : 8002 B004 AE02    
(1)  191/    1840 : B106 AF04 AD26      	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
             1846 : 8006 B104 8002    
(1)  192/    184C : B304 8002 B104      	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
             1852 : 8002 B504 B502    
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 29 - 4/3/2023 13:9:54


(1)  193/    1858 : 8004 B00E 8006      	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
             185E : B50C B804 B502    
(1)  194/    1864 : BA0C 8006 B602      	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
             186A : 8004 B50C B1AE    
(1)  195/    1870 : B0B1 B304 B102      	dc.b	nB3, nC4, nD4, $04, nC4, $02, nD4, $04, nD4, $02, nRst, $10
             1876 : B304 B302 8010    
(1)  196/    187C : A702 A904 AC02      	dc.b	nD3, $02, nE3, $04, nG3, $02, nC4, $18, nRst, $06, nC4, $04
             1882 : B118 8006 B104    
(1)  197/    1888 : 8002 B304 B108      	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
             188E : B504 B502 8004    
(1)  198/    1894 : B01A 8006 B0B5      	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
             189A : 0402 8004 B102    
(1)  199/    18A0 : AE12 8006 AE04      	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
             18A6 : 8002 B004 AE02    
(1)  200/    18AC : B106 AF04 AD26      	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
             18B2 : 8006 B104 8002    
(1)  201/    18B8 : B304 8002 B104      	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
             18BE : 8002 B504 B502    
(1)  202/    18C4 : 8004 B00E 8006      	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
             18CA : B50C B804 B502    
(1)  203/    18D0 : BA0C 8006 B602      	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
             18D6 : 8004 B50C B1AE    
(1)  204/    18DC : B006                	dc.b	nB3, $06
(1)  205/    18DE : (MACRO)              	smpsAlterVol        $04
(1)  205/    18DE : E604                        dc.b    $E6,$04
(1)  206/    18E0 : B602 8004 B50C      	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nB3, $06
             18E6 : B1AE B006          
(1)  207/    18EA : (MACRO)              	smpsAlterVol        $F8
(1)  207/    18EA : E6F8                        dc.b    $E6,$F8
(1)  208/    18EC : B602 8004 B50C      	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nF3, $0A, nE3, $02
             18F2 : B1AE AA0A A902    
(1)  209/    18F8 : 8030                	dc.b	nRst, $30
(1)  210/    18FA : (MACRO)              	smpsAlterVol        $04
(1)  210/    18FA : E604                        dc.b    $E6,$04
(1)  211/    18FC : (MACRO)              	smpsJump            CNZ_Jump00
(1)  211/    18FC : F6                          dc.b    $F6
(1)  211/    18FD : =>TRUE                       if SonicDriverVer<>1
(1)  211/    18FD : EA17                                dc.w    z80_ptr(CNZ_Jump00)
(1)  211/    18FF : =>FALSE                      else
(1)  211/    18FF :                                     dc.w    CNZ_Jump00-*-1
(1)  211/    18FF : [211]                        endif
(1)  212/    18FF :                     
(1)  213/    18FF :                     ; PSG1 Data
(1)  214/    18FF :                     CNZ_PSG1:
(1)  215/    18FF : 8018                	dc.b	nRst, $18
(1)  216/    1901 :                     
(1)  217/    1901 :                     CNZ_Jump06:
(1)  218/    1901 : 8006 B80C B402      	dc.b	nRst, $06, nG4, $0C, nEb4, $02, nRst, $04, nA4, nAb4, $02, nRst
             1907 : 8004 BAB9 0280    
(1)  219/    190D : 04B8 0280 04B4      	dc.b	$04, nG4, $02, nRst, $04, nEb4, $08, nRst, $06, nB3, $02, nRst
             1913 : 0880 06B0 0280    
(1)  220/    1919 : 04B3 B102 8004      	dc.b	$04, nD4, nC4, $02, nRst, $04, nB3, $02, nRst, $18
             191F : B002 8018          
(1)  221/    1923 : (MACRO)              	smpsPSGvoice        fTone_01
(1)  221/    1923 : F501                        dc.b    $F5,fTone_01
(1)  222/    1925 : (MACRO)              	smpsPSGAlterVol     $FF
(1)  222/    1925 : ECFF                        dc.b    $EC,$FF
(1)  223/    1927 : (MACRO)              	smpsCall            CNZ_Call02
(1)  223/    1927 : F8                          dc.b    $F8
(1)  223/    1928 : =>TRUE                       if SonicDriverVer<>1
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 30 - 4/3/2023 13:9:54


(1)  223/    1928 : DF14                                dc.w    z80_ptr(CNZ_Call02)
(1)  223/    192A : =>FALSE                      else
(1)  223/    192A :                                     dc.w    CNZ_Call02-*-1
(1)  223/    192A : [223]                        endif
(1)  224/    192A : (MACRO)              	smpsPSGAlterVol     $01
(1)  224/    192A : EC01                        dc.b    $EC,$01
(1)  225/    192C : (MACRO)              	smpsPSGvoice        $00
(1)  225/    192C : F500                        dc.b    $F5,$00
(1)  226/    192E : (MACRO)              	smpsAlterPitch      $E8
(1)  226/    192E :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  226/    192E : =>FALSE                      if SonicDriverVer>=3
(1)  226/    192E :                                     dc.b    $FB,$E8
(1)  226/    192E : =>TRUE                       else
(1)  226/    192E : E9E8                                dc.b    $E9,$E8
(1)  226/    1930 : [226]                        endif
(1)  227/    1930 : (MACRO)              	smpsCall            CNZ_Call03
(1)  227/    1930 : F8                          dc.b    $F8
(1)  227/    1931 : =>TRUE                       if SonicDriverVer<>1
(1)  227/    1931 : 6F15                                dc.w    z80_ptr(CNZ_Call03)
(1)  227/    1933 : =>FALSE                      else
(1)  227/    1933 :                                     dc.w    CNZ_Call03-*-1
(1)  227/    1933 : [227]                        endif
(1)  228/    1933 : (MACRO)              	smpsAlterPitch      $18
(1)  228/    1933 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  228/    1933 : =>FALSE                      if SonicDriverVer>=3
(1)  228/    1933 :                                     dc.b    $FB,$18
(1)  228/    1933 : =>TRUE                       else
(1)  228/    1933 : E918                                dc.b    $E9,$18
(1)  228/    1935 : [228]                        endif
(1)  229/    1935 : (MACRO)              	smpsPSGAlterVol     $02
(1)  229/    1935 : EC02                        dc.b    $EC,$02
(1)  230/    1937 : B518 B30C B506      	dc.b	nE4, $18, nD4, $0C, nE4, $06, nD4, nC4, $18, nF4
             193D : B3B1 18B6          
(1)  231/    1941 : (MACRO)              	smpsPSGAlterVol     $FE
(1)  231/    1941 : ECFE                        dc.b    $EC,$FE
(1)  232/    1943 : 8006 B880 B880      	dc.b	nRst, $06, nG4, nRst, nG4, nRst, nA4, nRst, nA4
             1949 : BA80 BA          
(1)  233/    194C : (MACRO)              	smpsPSGAlterVol     $03
(1)  233/    194C : EC03                        dc.b    $EC,$03
(1)  234/    194E : C40C C1BD BF06 80   	dc.b	nG5, $0C, nE5, nC5, nD5, $06, nRst
(1)  235/    1955 : (MACRO)              	smpsPSGAlterVol     $FC
(1)  235/    1955 : ECFC                        dc.b    $EC,$FC
(1)  236/    1957 : 80B8 80B8 80BA      	dc.b	nRst, nG4, nRst, nG4, nRst, nA4, $0C, $04, nG4, $02, nRst, $30
             195D : 0C04 B802 8030    
(1)  237/    1963 : (MACRO)              	smpsPSGAlterVol     $01
(1)  237/    1963 : EC01                        dc.b    $EC,$01
(1)  238/    1965 : (MACRO)              	smpsJump            CNZ_Jump06
(1)  238/    1965 : F6                          dc.b    $F6
(1)  238/    1966 : =>TRUE                       if SonicDriverVer<>1
(1)  238/    1966 : 0119                                dc.w    z80_ptr(CNZ_Jump06)
(1)  238/    1968 : =>FALSE                      else
(1)  238/    1968 :                                     dc.w    CNZ_Jump06-*-1
(1)  238/    1968 : [238]                        endif
(1)  239/    1968 :                     
(1)  240/    1968 :                     ; PSG2 Data
(1)  241/    1968 :                     CNZ_PSG2:
(1)  242/    1968 : 8018                	dc.b	nRst, $18
(1)  243/    196A :                     
(1)  244/    196A :                     CNZ_Jump05:
(1)  245/    196A : 8006 C00C BD02      	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 31 - 4/3/2023 13:9:54


             1970 : 8004 C3C2 0280    
(1)  246/    1976 : 04C0 0280 04BD      	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
             197C : 0880 06B8 0280    
(1)  247/    1982 : 04BB B902 8004      	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $18
             1988 : B802 8018          
(1)  248/    198C : (MACRO)              	smpsPSGvoice        fTone_01
(1)  248/    198C : F501                        dc.b    $F5,fTone_01
(1)  249/    198E : (MACRO)              	smpsPSGAlterVol     $FF
(1)  249/    198E : ECFF                        dc.b    $EC,$FF
(1)  250/    1990 : (MACRO)              	smpsCall            CNZ_Call00
(1)  250/    1990 : F8                          dc.b    $F8
(1)  250/    1991 : =>TRUE                       if SonicDriverVer<>1
(1)  250/    1991 : 1516                                dc.w    z80_ptr(CNZ_Call00)
(1)  250/    1993 : =>FALSE                      else
(1)  250/    1993 :                                     dc.w    CNZ_Call00-*-1
(1)  250/    1993 : [250]                        endif
(1)  251/    1993 : (MACRO)              	smpsPSGAlterVol     $01
(1)  251/    1993 : EC01                        dc.b    $EC,$01
(1)  252/    1995 : (MACRO)              	smpsPSGvoice        $00
(1)  252/    1995 : F500                        dc.b    $F5,$00
(1)  253/    1997 : (MACRO)              	smpsAlterPitch      $E8
(1)  253/    1997 :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  253/    1997 : =>FALSE                      if SonicDriverVer>=3
(1)  253/    1997 :                                     dc.b    $FB,$E8
(1)  253/    1997 : =>TRUE                       else
(1)  253/    1997 : E9E8                                dc.b    $E9,$E8
(1)  253/    1999 : [253]                        endif
(1)  254/    1999 : (MACRO)              	smpsCall            CNZ_Call01
(1)  254/    1999 : F8                          dc.b    $F8
(1)  254/    199A : =>TRUE                       if SonicDriverVer<>1
(1)  254/    199A : 8016                                dc.w    z80_ptr(CNZ_Call01)
(1)  254/    199C : =>FALSE                      else
(1)  254/    199C :                                     dc.w    CNZ_Call01-*-1
(1)  254/    199C : [254]                        endif
(1)  255/    199C : (MACRO)              	smpsAlterPitch      $18
(1)  255/    199C :  (MACRO-2)                   smpsChangeTransposition $18
(1)  255/    199C : =>FALSE                      if SonicDriverVer>=3
(1)  255/    199C :                                     dc.b    $FB,$18
(1)  255/    199C : =>TRUE                       else
(1)  255/    199C : E918                                dc.b    $E9,$18
(1)  255/    199E : [255]                        endif
(1)  256/    199E : (MACRO)              	smpsPSGAlterVol     $02
(1)  256/    199E : EC02                        dc.b    $EC,$02
(1)  257/    19A0 : B118 B00C B106      	dc.b	nC4, $18, nB3, $0C, nC4, $06, nB3, nA3, $18, nC4
             19A6 : B0AE 18B1          
(1)  258/    19AA : (MACRO)              	smpsPSGAlterVol     $FE
(1)  258/    19AA : ECFE                        dc.b    $EC,$FE
(1)  259/    19AC : 8006 B580 B580      	dc.b	nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
             19B2 : B680 B6          
(1)  260/    19B5 : (MACRO)              	smpsPSGAlterVol     $03
(1)  260/    19B5 : EC03                        dc.b    $EC,$03
(1)  261/    19B7 : 80B1 80B1 80B1      	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, nRst, nC4
             19BD : 80B1             
(1)  262/    19BF : (MACRO)              	smpsPSGAlterVol     $FC
(1)  262/    19BF : ECFC                        dc.b    $EC,$FC
(1)  263/    19C1 : 80B1 80B1 80B1      	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, $0C, $04, nC4, $02
             19C7 : 0C04 B102          
(1)  264/    19CB : (MACRO)              	smpsPSGAlterVol     $01
(1)  264/    19CB : EC01                        dc.b    $EC,$01
(1)  265/    19CD : 8030                	dc.b	nRst, $30
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 32 - 4/3/2023 13:9:54


(1)  266/    19CF : (MACRO)              	smpsJump            CNZ_Jump05
(1)  266/    19CF : F6                          dc.b    $F6
(1)  266/    19D0 : =>TRUE                       if SonicDriverVer<>1
(1)  266/    19D0 : 6A19                                dc.w    z80_ptr(CNZ_Jump05)
(1)  266/    19D2 : =>FALSE                      else
(1)  266/    19D2 :                                     dc.w    CNZ_Jump05-*-1
(1)  266/    19D2 : [266]                        endif
(1)  267/    19D2 :                     
(1)  268/    19D2 :                     	; Unreachable
(1)  269/    19D2 : (MACRO)              	smpsStop
(1)  269/    19D2 : F2                          dc.b    $F2
(1)  270/    19D3 :                     
(1)  271/    19D3 :                     ; PSG3 Data
(1)  272/    19D3 :                     CNZ_PSG3:
(1)  273/    19D3 : (MACRO)              	smpsPSGform         $E7
(1)  273/    19D3 : F3E7                        dc.b    $F3,$E7
(1)  274/    19D5 : 8018                	dc.b	nRst, $18
(1)  275/    19D7 :                     
(1)  276/    19D7 :                     CNZ_Loop03:
(1)  277/    19D7 : (MACRO)              	smpsCall            CNZ_Call04
(1)  277/    19D7 : F8                          dc.b    $F8
(1)  277/    19D8 : =>TRUE                       if SonicDriverVer<>1
(1)  277/    19D8 : FC19                                dc.w    z80_ptr(CNZ_Call04)
(1)  277/    19DA : =>FALSE                      else
(1)  277/    19DA :                                     dc.w    CNZ_Call04-*-1
(1)  277/    19DA : [277]                        endif
(1)  278/    19DA : (MACRO)              	smpsLoop            $01, $07, CNZ_Loop03
(1)  278/    19DA : F7                          dc.b    $F7
(1)  278/    19DB : 0107                        dc.b    $01,$07
(1)  278/    19DD : =>TRUE                       if SonicDriverVer<>1
(1)  278/    19DD : D719                                dc.w    z80_ptr(CNZ_Loop03)
(1)  278/    19DF : =>FALSE                      else
(1)  278/    19DF :                                     dc.w    CNZ_Loop03-*-1
(1)  278/    19DF : [278]                        endif
(1)  279/    19DF : 0402 0402           	dc.b	$04, $02, $04, $02
(1)  280/    19E3 :                     
(1)  281/    19E3 :                     CNZ_Loop04:
(1)  282/    19E3 : (MACRO)              	smpsCall            CNZ_Call04
(1)  282/    19E3 : F8                          dc.b    $F8
(1)  282/    19E4 : =>TRUE                       if SonicDriverVer<>1
(1)  282/    19E4 : FC19                                dc.w    z80_ptr(CNZ_Call04)
(1)  282/    19E6 : =>FALSE                      else
(1)  282/    19E6 :                                     dc.w    CNZ_Call04-*-1
(1)  282/    19E6 : [282]                        endif
(1)  283/    19E6 : (MACRO)              	smpsLoop            $01, $1F, CNZ_Loop04
(1)  283/    19E6 : F7                          dc.b    $F7
(1)  283/    19E7 : 011F                        dc.b    $01,$1F
(1)  283/    19E9 : =>TRUE                       if SonicDriverVer<>1
(1)  283/    19E9 : E319                                dc.w    z80_ptr(CNZ_Loop04)
(1)  283/    19EB : =>FALSE                      else
(1)  283/    19EB :                                     dc.w    CNZ_Loop04-*-1
(1)  283/    19EB : [283]                        endif
(1)  284/    19EB : 0402 0402           	dc.b	$04, $02, $04, $02
(1)  285/    19EF :                     
(1)  286/    19EF :                     CNZ_Loop05:
(1)  287/    19EF : (MACRO)              	smpsCall            CNZ_Call04
(1)  287/    19EF : F8                          dc.b    $F8
(1)  287/    19F0 : =>TRUE                       if SonicDriverVer<>1
(1)  287/    19F0 : FC19                                dc.w    z80_ptr(CNZ_Call04)
(1)  287/    19F2 : =>FALSE                      else
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 33 - 4/3/2023 13:9:54


(1)  287/    19F2 :                                     dc.w    CNZ_Call04-*-1
(1)  287/    19F2 : [287]                        endif
(1)  288/    19F2 : (MACRO)              	smpsLoop            $01, $24, CNZ_Loop05
(1)  288/    19F2 : F7                          dc.b    $F7
(1)  288/    19F3 : 0124                        dc.b    $01,$24
(1)  288/    19F5 : =>TRUE                       if SonicDriverVer<>1
(1)  288/    19F5 : EF19                                dc.w    z80_ptr(CNZ_Loop05)
(1)  288/    19F7 : =>FALSE                      else
(1)  288/    19F7 :                                     dc.w    CNZ_Loop05-*-1
(1)  288/    19F7 : [288]                        endif
(1)  289/    19F7 : 8030                	dc.b	nRst, $30
(1)  290/    19F9 : (MACRO)              	smpsJump            CNZ_Loop03
(1)  290/    19F9 : F6                          dc.b    $F6
(1)  290/    19FA : =>TRUE                       if SonicDriverVer<>1
(1)  290/    19FA : D719                                dc.w    z80_ptr(CNZ_Loop03)
(1)  290/    19FC : =>FALSE                      else
(1)  290/    19FC :                                     dc.w    CNZ_Loop03-*-1
(1)  290/    19FC : [290]                        endif
(1)  291/    19FC :                     
(1)  292/    19FC :                     CNZ_Call04:
(1)  293/    19FC : (MACRO)              	smpsPSGvoice        fTone_01
(1)  293/    19FC : F501                        dc.b    $F5,fTone_01
(1)  294/    19FE : C606                	dc.b	nMaxPSG, $06
(1)  295/    1A00 : (MACRO)              	smpsPSGvoice        fTone_02
(1)  295/    1A00 : F502                        dc.b    $F5,fTone_02
(1)  296/    1A02 : (MACRO)              	smpsPSGAlterVol     $FF
(1)  296/    1A02 : ECFF                        dc.b    $EC,$FF
(1)  297/    1A04 : 04                  	dc.b	$04
(1)  298/    1A05 : (MACRO)              	smpsPSGvoice        fTone_01
(1)  298/    1A05 : F501                        dc.b    $F5,fTone_01
(1)  299/    1A07 : (MACRO)              	smpsPSGAlterVol     $01
(1)  299/    1A07 : EC01                        dc.b    $EC,$01
(1)  300/    1A09 : 02                  	dc.b	$02
(1)  301/    1A0A : (MACRO)              	smpsReturn
(1)  301/    1A0A : =>FALSE                      if SonicDriverVer>=3
(1)  301/    1A0A :                                     dc.b    $F9
(1)  301/    1A0A : =>TRUE                       else
(1)  301/    1A0A : E3                                  dc.b    $E3
(1)  301/    1A0B : [301]                        endif
(1)  302/    1A0B :                     
(1)  303/    1A0B :                     ; DAC Data
(1)  304/    1A0B :                     CNZ_DAC:
(1)  305/    1A0B : 8106 8181 0482      	dc.b	dKick, $06, dKick, dKick, $04, dSnare, $02, $06
             1A11 : 0206             
(1)  306/    1A13 :                     
(1)  307/    1A13 :                     CNZ_Loop00:
(1)  308/    1A13 : 8106 82             	dc.b	dKick, $06, dSnare
(1)  309/    1A16 : (MACRO)              	smpsLoop            $00, $04, CNZ_Loop00
(1)  309/    1A16 : F7                          dc.b    $F7
(1)  309/    1A17 : 0004                        dc.b    $00,$04
(1)  309/    1A19 : =>TRUE                       if SonicDriverVer<>1
(1)  309/    1A19 : 131A                                dc.w    z80_ptr(CNZ_Loop00)
(1)  309/    1A1B : =>FALSE                      else
(1)  309/    1A1B :                                     dc.w    CNZ_Loop00-*-1
(1)  309/    1A1B : [309]                        endif
(1)  310/    1A1B : 8106 8282 0406      	dc.b	dKick, $06, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
             1A21 : 0681 0206 0682    
(1)  311/    1A27 :                     
(1)  312/    1A27 :                     CNZ_Loop01:
(1)  313/    1A27 : 8182                	dc.b	dKick, dSnare
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 34 - 4/3/2023 13:9:54


(1)  314/    1A29 : (MACRO)              	smpsLoop            $00, $1C, CNZ_Loop01
(1)  314/    1A29 : F7                          dc.b    $F7
(1)  314/    1A2A : 001C                        dc.b    $00,$1C
(1)  314/    1A2C : =>TRUE                       if SonicDriverVer<>1
(1)  314/    1A2C : 271A                                dc.w    z80_ptr(CNZ_Loop01)
(1)  314/    1A2E : =>FALSE                      else
(1)  314/    1A2E :                                     dc.w    CNZ_Loop01-*-1
(1)  314/    1A2E : [314]                        endif
(1)  315/    1A2E : 8182 8204 0606      	dc.b	dKick, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
             1A34 : 8102 0606 82       
(1)  316/    1A39 :                     
(1)  317/    1A39 :                     CNZ_Loop02:
(1)  318/    1A39 : 8182                	dc.b	dKick, dSnare
(1)  319/    1A3B : (MACRO)              	smpsLoop            $00, $20, CNZ_Loop02
(1)  319/    1A3B : F7                          dc.b    $F7
(1)  319/    1A3C : 0020                        dc.b    $00,$20
(1)  319/    1A3E : =>TRUE                       if SonicDriverVer<>1
(1)  319/    1A3E : 391A                                dc.w    z80_ptr(CNZ_Loop02)
(1)  319/    1A40 : =>FALSE                      else
(1)  319/    1A40 :                                     dc.w    CNZ_Loop02-*-1
(1)  319/    1A40 : [319]                        endif
(1)  320/    1A40 : 8182 8182 8182      	dc.b	dKick, dSnare, dKick, dSnare, dKick, dSnare, dSnare, $04, $06, $02, nRst, $28
             1A46 : 8204 0602 8028    
(1)  321/    1A4C : 8202 06             	dc.b	dSnare, $02, $06
(1)  322/    1A4F : (MACRO)              	smpsJump            CNZ_Loop00
(1)  322/    1A4F : F6                          dc.b    $F6
(1)  322/    1A50 : =>TRUE                       if SonicDriverVer<>1
(1)  322/    1A50 : 131A                                dc.w    z80_ptr(CNZ_Loop00)
(1)  322/    1A52 : =>FALSE                      else
(1)  322/    1A52 :                                     dc.w    CNZ_Loop00-*-1
(1)  322/    1A52 : [322]                        endif
(1)  323/    1A52 :                     
(1)  324/    1A52 :                     CNZ_Voices:
(1)  325/    1A52 :                     ;	Voice $00
(1)  326/    1A52 :                     ;	$3A
(1)  327/    1A52 :                     ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
(1)  328/    1A52 :                     ;	$05, $07, $0A, $08, 	$A4, $85, $96, $78, 	$21, $25, $28, $00
(1)  329/    1A52 : (MACRO)              	smpsVcAlgorithm     $02
(1)  329/    1A52 : =$2                  vcAlgorithm set $02
(1)  330/    1A52 : (MACRO)              	smpsVcFeedback      $07
(1)  330/    1A52 : =$7                  vcFeedback set $07
(1)  331/    1A52 : (MACRO)              	smpsVcUnusedBits    $00
(1)  331/    1A52 : =$0                  vcUnusedBits set $00
(1)  331/    1A52 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  331/    1A52 :                                     set vcD1R1Unk,<<5
(1)  331/    1A52 :                                     set vcD1R2Unk,<<5
(1)  331/    1A52 :                                     set vcD1R3Unk,<<5
(1)  331/    1A52 :                                     set vcD1R4Unk,<<5
(1)  331/    1A52 : =>TRUE                       else
(1)  331/    1A52 : =$0                                  set vcD1R1Unk,0
(1)  331/    1A52 : =$0                                  set vcD1R2Unk,0
(1)  331/    1A52 : =$0                                  set vcD1R3Unk,0
(1)  331/    1A52 : =$0                                  set vcD1R4Unk,0
(1)  331/    1A52 : [331]                        endif
(1)  332/    1A52 : (MACRO)              	smpsVcDetune        $00, $06, $02, $02
(1)  332/    1A52 : =$0                          set vcDT1,$00
(1)  332/    1A52 : =$6                          set vcDT2,$06
(1)  332/    1A52 : =$2                          set vcDT3,$02
(1)  332/    1A52 : =$2                          set vcDT4,$02
(1)  333/    1A52 : (MACRO)              	smpsVcCoarseFreq    $01, $00, $03, $00
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 35 - 4/3/2023 13:9:54


(1)  333/    1A52 : =$1                          set vcCF1,$01
(1)  333/    1A52 : =$0                          set vcCF2,$00
(1)  333/    1A52 : =$3                          set vcCF3,$03
(1)  333/    1A52 : =$0                          set vcCF4,$00
(1)  334/    1A52 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  334/    1A52 : =$0                          set vcRS1,$00
(1)  334/    1A52 : =$0                          set vcRS2,$00
(1)  334/    1A52 : =$0                          set vcRS3,$00
(1)  334/    1A52 : =$0                          set vcRS4,$00
(1)  335/    1A52 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1E
(1)  335/    1A52 : =$1F                         set vcAR1,$1F
(1)  335/    1A52 : =$1F                         set vcAR2,$1F
(1)  335/    1A52 : =$1F                         set vcAR3,$1F
(1)  335/    1A52 : =$1E                         set vcAR4,$1E
(1)  336/    1A52 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  336/    1A52 : =>FALSE                      if SourceSMPS2ASM==0
(1)  336/    1A52 :                                     set vcAM1,$00<<5
(1)  336/    1A52 :                                     set vcAM2,$00<<5
(1)  336/    1A52 :                                     set vcAM3,$00<<5
(1)  336/    1A52 :                                     set vcAM4,$00<<5
(1)  336/    1A52 : =>TRUE                       else
(1)  336/    1A52 : =$0                                  set vcAM1,$00<<7
(1)  336/    1A52 : =$0                                  set vcAM2,$00<<7
(1)  336/    1A52 : =$0                                  set vcAM3,$00<<7
(1)  336/    1A52 : =$0                                  set vcAM4,$00<<7
(1)  336/    1A52 : [336]                        endif
(1)  337/    1A52 : (MACRO)              	smpsVcDecayRate1    $0A, $0B, $0A, $0A
(1)  337/    1A52 : =$A                          set vcD1R1,$0A
(1)  337/    1A52 : =$B                          set vcD1R2,$0B
(1)  337/    1A52 : =$A                          set vcD1R3,$0A
(1)  337/    1A52 : =$A                          set vcD1R4,$0A
(1)  338/    1A52 : (MACRO)              	smpsVcDecayRate2    $08, $0A, $07, $05
(1)  338/    1A52 : =$8                          set vcD2R1,$08
(1)  338/    1A52 : =$A                          set vcD2R2,$0A
(1)  338/    1A52 : =$7                          set vcD2R3,$07
(1)  338/    1A52 : =$5                          set vcD2R4,$05
(1)  339/    1A52 : (MACRO)              	smpsVcDecayLevel    $07, $09, $08, $0A
(1)  339/    1A52 : =$7                          set vcDL1,$07
(1)  339/    1A52 : =$9                          set vcDL2,$09
(1)  339/    1A52 : =$8                          set vcDL3,$08
(1)  339/    1A52 : =$A                          set vcDL4,$0A
(1)  340/    1A52 : (MACRO)              	smpsVcReleaseRate   $08, $06, $05, $04
(1)  340/    1A52 : =$8                          set vcRR1,$08
(1)  340/    1A52 : =$6                          set vcRR2,$06
(1)  340/    1A52 : =$5                          set vcRR3,$05
(1)  340/    1A52 : =$4                          set vcRR4,$04
(1)  341/    1A52 : (MACRO)              	smpsVcTotalLevel    $00, $28, $25, $21
(1)  341/    1A52 : =$0                          set vcTL1,$00
(1)  341/    1A52 : =$28                         set vcTL2,$28
(1)  341/    1A52 : =$25                         set vcTL3,$25
(1)  341/    1A52 : =$21                         set vcTL4,$21
(1)  341/    1A52 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  341/    1A53 :                     ;   0     1     2     3     4     5     6     7
(1)  341/    1A53 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  341/    1A53 : =>FALSE                      if SourceSMPS2ASM==0
(1)  341/    1A53 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  341/    1A53 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  341/    1A53 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  341/    1A53 :                                     set vcTLMask1,$80
(1)  341/    1A53 : =>TRUE                       else
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 36 - 4/3/2023 13:9:54


(1)  341/    1A53 : =$0                                  set vcTLMask4,0
(1)  341/    1A53 : =$0                                  set vcTLMask3,0
(1)  341/    1A53 : =$0                                  set vcTLMask2,0
(1)  341/    1A53 : =$0                                  set vcTLMask1,0
(1)  341/    1A53 : [341]                        endif
(1)  341/    1A53 :                     
(1)  341/    1A53 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  341/    1A53 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  341/    1A53 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  341/    1A53 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  341/    1A53 :                                     set vcTLMask1,$80
(1)  341/    1A53 :                                     set vcTL1,vcTL1&$7F
(1)  341/    1A53 :                                     set vcTL2,vcTL2&$7F
(1)  341/    1A53 :                                     set vcTL3,vcTL3&$7F
(1)  341/    1A53 :                                     set vcTL4,vcTL4&$7F
(1)  341/    1A53 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  341/    1A53 :                                     if MOMPASS>1
(1)  341/    1A53 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  341/    1A53 : [341]                                endif
(1)  341/    1A53 : [341]                        endif
(1)  341/    1A53 :                     
(1)  341/    1A53 : =>TRUE                       if SonicDriverVer==2
(1)  341/    1A53 : 2060 2301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  341/    1A57 : 1E1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  341/    1A5B : 0A0B 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  341/    1A5F : 050A 0708                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  341/    1A63 : A496 8578                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  341/    1A67 : 2128 2500                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  341/    1A6B : =>FALSE                      else
(1)  341/    1A6B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  341/    1A6B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  341/    1A6B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  341/    1A6B :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  341/    1A6B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  341/    1A6B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  341/    1A6B : [341]                        endif
(1)  342/    1A6B :                     
(1)  343/    1A6B :                     ;	Voice $01
(1)  344/    1A6B :                     ;	$3A
(1)  345/    1A6B :                     ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
(1)  346/    1A6B :                     ;	$02, $00, $00, $00, 	$18, $18, $28, $28, 	$19, $20, $2A, $00
(1)  347/    1A6B : (MACRO)              	smpsVcAlgorithm     $02
(1)  347/    1A6B : =$2                  vcAlgorithm set $02
(1)  348/    1A6B : (MACRO)              	smpsVcFeedback      $07
(1)  348/    1A6B : =$7                  vcFeedback set $07
(1)  349/    1A6B : (MACRO)              	smpsVcUnusedBits    $00
(1)  349/    1A6B : =$0                  vcUnusedBits set $00
(1)  349/    1A6B : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  349/    1A6B :                                     set vcD1R1Unk,<<5
(1)  349/    1A6B :                                     set vcD1R2Unk,<<5
(1)  349/    1A6B :                                     set vcD1R3Unk,<<5
(1)  349/    1A6B :                                     set vcD1R4Unk,<<5
(1)  349/    1A6B : =>TRUE                       else
(1)  349/    1A6B : =$0                                  set vcD1R1Unk,0
(1)  349/    1A6B : =$0                                  set vcD1R2Unk,0
(1)  349/    1A6B : =$0                                  set vcD1R3Unk,0
(1)  349/    1A6B : =$0                                  set vcD1R4Unk,0
(1)  349/    1A6B : [349]                        endif
(1)  350/    1A6B : (MACRO)              	smpsVcDetune        $04, $03, $05, $03
(1)  350/    1A6B : =$4                          set vcDT1,$04
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 37 - 4/3/2023 13:9:54


(1)  350/    1A6B : =$3                          set vcDT2,$03
(1)  350/    1A6B : =$5                          set vcDT3,$05
(1)  350/    1A6B : =$3                          set vcDT4,$03
(1)  351/    1A6B : (MACRO)              	smpsVcCoarseFreq    $02, $02, $06, $02
(1)  351/    1A6B : =$2                          set vcCF1,$02
(1)  351/    1A6B : =$2                          set vcCF2,$02
(1)  351/    1A6B : =$6                          set vcCF3,$06
(1)  351/    1A6B : =$2                          set vcCF4,$02
(1)  352/    1A6B : (MACRO)              	smpsVcRateScale     $01, $00, $01, $02
(1)  352/    1A6B : =$1                          set vcRS1,$01
(1)  352/    1A6B : =$0                          set vcRS2,$00
(1)  352/    1A6B : =$1                          set vcRS3,$01
(1)  352/    1A6B : =$2                          set vcRS4,$02
(1)  353/    1A6B : (MACRO)              	smpsVcAttackRate    $12, $15, $0F, $0D
(1)  353/    1A6B : =$12                         set vcAR1,$12
(1)  353/    1A6B : =$15                         set vcAR2,$15
(1)  353/    1A6B : =$F                          set vcAR3,$0F
(1)  353/    1A6B : =$D                          set vcAR4,$0D
(1)  354/    1A6B : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  354/    1A6B : =>FALSE                      if SourceSMPS2ASM==0
(1)  354/    1A6B :                                     set vcAM1,$00<<5
(1)  354/    1A6B :                                     set vcAM2,$00<<5
(1)  354/    1A6B :                                     set vcAM3,$00<<5
(1)  354/    1A6B :                                     set vcAM4,$00<<5
(1)  354/    1A6B : =>TRUE                       else
(1)  354/    1A6B : =$0                                  set vcAM1,$00<<7
(1)  354/    1A6B : =$0                                  set vcAM2,$00<<7
(1)  354/    1A6B : =$0                                  set vcAM3,$00<<7
(1)  354/    1A6B : =$0                                  set vcAM4,$00<<7
(1)  354/    1A6B : [354]                        endif
(1)  355/    1A6B : (MACRO)              	smpsVcDecayRate1    $04, $07, $08, $06
(1)  355/    1A6B : =$4                          set vcD1R1,$04
(1)  355/    1A6B : =$7                          set vcD1R2,$07
(1)  355/    1A6B : =$8                          set vcD1R3,$08
(1)  355/    1A6B : =$6                          set vcD1R4,$06
(1)  356/    1A6B : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $02
(1)  356/    1A6B : =$0                          set vcD2R1,$00
(1)  356/    1A6B : =$0                          set vcD2R2,$00
(1)  356/    1A6B : =$0                          set vcD2R3,$00
(1)  356/    1A6B : =$2                          set vcD2R4,$02
(1)  357/    1A6B : (MACRO)              	smpsVcDecayLevel    $02, $02, $01, $01
(1)  357/    1A6B : =$2                          set vcDL1,$02
(1)  357/    1A6B : =$2                          set vcDL2,$02
(1)  357/    1A6B : =$1                          set vcDL3,$01
(1)  357/    1A6B : =$1                          set vcDL4,$01
(1)  358/    1A6B : (MACRO)              	smpsVcReleaseRate   $08, $08, $08, $08
(1)  358/    1A6B : =$8                          set vcRR1,$08
(1)  358/    1A6B : =$8                          set vcRR2,$08
(1)  358/    1A6B : =$8                          set vcRR3,$08
(1)  358/    1A6B : =$8                          set vcRR4,$08
(1)  359/    1A6B : (MACRO)              	smpsVcTotalLevel    $00, $2A, $20, $19
(1)  359/    1A6B : =$0                          set vcTL1,$00
(1)  359/    1A6B : =$2A                         set vcTL2,$2A
(1)  359/    1A6B : =$20                         set vcTL3,$20
(1)  359/    1A6B : =$19                         set vcTL4,$19
(1)  359/    1A6B : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  359/    1A6C :                     ;   0     1     2     3     4     5     6     7
(1)  359/    1A6C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  359/    1A6C : =>FALSE                      if SourceSMPS2ASM==0
(1)  359/    1A6C :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 38 - 4/3/2023 13:9:54


(1)  359/    1A6C :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  359/    1A6C :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  359/    1A6C :                                     set vcTLMask1,$80
(1)  359/    1A6C : =>TRUE                       else
(1)  359/    1A6C : =$0                                  set vcTLMask4,0
(1)  359/    1A6C : =$0                                  set vcTLMask3,0
(1)  359/    1A6C : =$0                                  set vcTLMask2,0
(1)  359/    1A6C : =$0                                  set vcTLMask1,0
(1)  359/    1A6C : [359]                        endif
(1)  359/    1A6C :                     
(1)  359/    1A6C : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  359/    1A6C :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  359/    1A6C :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  359/    1A6C :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  359/    1A6C :                                     set vcTLMask1,$80
(1)  359/    1A6C :                                     set vcTL1,vcTL1&$7F
(1)  359/    1A6C :                                     set vcTL2,vcTL2&$7F
(1)  359/    1A6C :                                     set vcTL3,vcTL3&$7F
(1)  359/    1A6C :                                     set vcTL4,vcTL4&$7F
(1)  359/    1A6C : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  359/    1A6C :                                     if MOMPASS>1
(1)  359/    1A6C :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  359/    1A6C : [359]                                endif
(1)  359/    1A6C : [359]                        endif
(1)  359/    1A6C :                     
(1)  359/    1A6C : =>TRUE                       if SonicDriverVer==2
(1)  359/    1A6C : 3232 5642                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  359/    1A70 : 8D15 4F52                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  359/    1A74 : 0607 0804                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  359/    1A78 : 0200 0000                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  359/    1A7C : 1828 1828                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  359/    1A80 : 192A 2000                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  359/    1A84 : =>FALSE                      else
(1)  359/    1A84 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  359/    1A84 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  359/    1A84 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  359/    1A84 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  359/    1A84 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  359/    1A84 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  359/    1A84 : [359]                        endif
(1)  360/    1A84 :                     
(1)  361/    1A84 :                     ;	Voice $02
(1)  362/    1A84 :                     ;	$2C
(1)  363/    1A84 :                     ;	$61, $03, $01, $33, 	$5F, $94, $5F, $94, 	$05, $05, $05, $07
(1)  364/    1A84 :                     ;	$02, $02, $02, $02, 	$1F, $6F, $1F, $AF, 	$1E, $80, $1E, $80
(1)  365/    1A84 : (MACRO)              	smpsVcAlgorithm     $04
(1)  365/    1A84 : =$4                  vcAlgorithm set $04
(1)  366/    1A84 : (MACRO)              	smpsVcFeedback      $05
(1)  366/    1A84 : =$5                  vcFeedback set $05
(1)  367/    1A84 : (MACRO)              	smpsVcUnusedBits    $00
(1)  367/    1A84 : =$0                  vcUnusedBits set $00
(1)  367/    1A84 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  367/    1A84 :                                     set vcD1R1Unk,<<5
(1)  367/    1A84 :                                     set vcD1R2Unk,<<5
(1)  367/    1A84 :                                     set vcD1R3Unk,<<5
(1)  367/    1A84 :                                     set vcD1R4Unk,<<5
(1)  367/    1A84 : =>TRUE                       else
(1)  367/    1A84 : =$0                                  set vcD1R1Unk,0
(1)  367/    1A84 : =$0                                  set vcD1R2Unk,0
(1)  367/    1A84 : =$0                                  set vcD1R3Unk,0
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 39 - 4/3/2023 13:9:54


(1)  367/    1A84 : =$0                                  set vcD1R4Unk,0
(1)  367/    1A84 : [367]                        endif
(1)  368/    1A84 : (MACRO)              	smpsVcDetune        $03, $00, $00, $06
(1)  368/    1A84 : =$3                          set vcDT1,$03
(1)  368/    1A84 : =$0                          set vcDT2,$00
(1)  368/    1A84 : =$0                          set vcDT3,$00
(1)  368/    1A84 : =$6                          set vcDT4,$06
(1)  369/    1A84 : (MACRO)              	smpsVcCoarseFreq    $03, $01, $03, $01
(1)  369/    1A84 : =$3                          set vcCF1,$03
(1)  369/    1A84 : =$1                          set vcCF2,$01
(1)  369/    1A84 : =$3                          set vcCF3,$03
(1)  369/    1A84 : =$1                          set vcCF4,$01
(1)  370/    1A84 : (MACRO)              	smpsVcRateScale     $02, $01, $02, $01
(1)  370/    1A84 : =$2                          set vcRS1,$02
(1)  370/    1A84 : =$1                          set vcRS2,$01
(1)  370/    1A84 : =$2                          set vcRS3,$02
(1)  370/    1A84 : =$1                          set vcRS4,$01
(1)  371/    1A84 : (MACRO)              	smpsVcAttackRate    $14, $1F, $14, $1F
(1)  371/    1A84 : =$14                         set vcAR1,$14
(1)  371/    1A84 : =$1F                         set vcAR2,$1F
(1)  371/    1A84 : =$14                         set vcAR3,$14
(1)  371/    1A84 : =$1F                         set vcAR4,$1F
(1)  372/    1A84 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  372/    1A84 : =>FALSE                      if SourceSMPS2ASM==0
(1)  372/    1A84 :                                     set vcAM1,$00<<5
(1)  372/    1A84 :                                     set vcAM2,$00<<5
(1)  372/    1A84 :                                     set vcAM3,$00<<5
(1)  372/    1A84 :                                     set vcAM4,$00<<5
(1)  372/    1A84 : =>TRUE                       else
(1)  372/    1A84 : =$0                                  set vcAM1,$00<<7
(1)  372/    1A84 : =$0                                  set vcAM2,$00<<7
(1)  372/    1A84 : =$0                                  set vcAM3,$00<<7
(1)  372/    1A84 : =$0                                  set vcAM4,$00<<7
(1)  372/    1A84 : [372]                        endif
(1)  373/    1A84 : (MACRO)              	smpsVcDecayRate1    $07, $05, $05, $05
(1)  373/    1A84 : =$7                          set vcD1R1,$07
(1)  373/    1A84 : =$5                          set vcD1R2,$05
(1)  373/    1A84 : =$5                          set vcD1R3,$05
(1)  373/    1A84 : =$5                          set vcD1R4,$05
(1)  374/    1A84 : (MACRO)              	smpsVcDecayRate2    $02, $02, $02, $02
(1)  374/    1A84 : =$2                          set vcD2R1,$02
(1)  374/    1A84 : =$2                          set vcD2R2,$02
(1)  374/    1A84 : =$2                          set vcD2R3,$02
(1)  374/    1A84 : =$2                          set vcD2R4,$02
(1)  375/    1A84 : (MACRO)              	smpsVcDecayLevel    $0A, $01, $06, $01
(1)  375/    1A84 : =$A                          set vcDL1,$0A
(1)  375/    1A84 : =$1                          set vcDL2,$01
(1)  375/    1A84 : =$6                          set vcDL3,$06
(1)  375/    1A84 : =$1                          set vcDL4,$01
(1)  376/    1A84 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  376/    1A84 : =$F                          set vcRR1,$0F
(1)  376/    1A84 : =$F                          set vcRR2,$0F
(1)  376/    1A84 : =$F                          set vcRR3,$0F
(1)  376/    1A84 : =$F                          set vcRR4,$0F
(1)  377/    1A84 : (MACRO)              	smpsVcTotalLevel    $80, $1E, $80, $1E
(1)  377/    1A84 : =$80                         set vcTL1,$80
(1)  377/    1A84 : =$1E                         set vcTL2,$1E
(1)  377/    1A84 : =$80                         set vcTL3,$80
(1)  377/    1A84 : =$1E                         set vcTL4,$1E
(1)  377/    1A84 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
 AS V1.42 Beta [Bld 212] - Source File song.asm(sound/music/89 - CNZ.asm) - Page 40 - 4/3/2023 13:9:54


(1)  377/    1A85 :                     ;   0     1     2     3     4     5     6     7
(1)  377/    1A85 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  377/    1A85 : =>FALSE                      if SourceSMPS2ASM==0
(1)  377/    1A85 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  377/    1A85 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  377/    1A85 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  377/    1A85 :                                     set vcTLMask1,$80
(1)  377/    1A85 : =>TRUE                       else
(1)  377/    1A85 : =$0                                  set vcTLMask4,0
(1)  377/    1A85 : =$0                                  set vcTLMask3,0
(1)  377/    1A85 : =$0                                  set vcTLMask2,0
(1)  377/    1A85 : =$0                                  set vcTLMask1,0
(1)  377/    1A85 : [377]                        endif
(1)  377/    1A85 :                     
(1)  377/    1A85 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  377/    1A85 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  377/    1A85 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  377/    1A85 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  377/    1A85 :                                     set vcTLMask1,$80
(1)  377/    1A85 :                                     set vcTL1,vcTL1&$7F
(1)  377/    1A85 :                                     set vcTL2,vcTL2&$7F
(1)  377/    1A85 :                                     set vcTL3,vcTL3&$7F
(1)  377/    1A85 :                                     set vcTL4,vcTL4&$7F
(1)  377/    1A85 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  377/    1A85 :                                     if MOMPASS>1
(1)  377/    1A85 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  377/    1A85 : [377]                                endif
(1)  377/    1A85 : [377]                        endif
(1)  377/    1A85 :                     
(1)  377/    1A85 : =>TRUE                       if SonicDriverVer==2
(1)  377/    1A85 : 6101 0333                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  377/    1A89 : 5F5F 9494                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  377/    1A8D : 0505 0507                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  377/    1A91 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  377/    1A95 : 1F1F 6FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  377/    1A99 : 1E1E 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  377/    1A9D : =>FALSE                      else
(1)  377/    1A9D :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  377/    1A9D :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  377/    1A9D :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  377/    1A9D :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  377/    1A9D :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  377/    1A9D :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  377/    1A9D : [377]                        endif
(1)  378/    1A9D :                     
(1)  379/    1A9D :                     
      11/     71D :                     	dephase
      12/     71D :                     
      13/     71D : =>FALSE              	if *>$7C0
      14/     71D :                     		error "This song is too big and will overflow the decompression buffer! It should be uncompressed instead!"
      15/     71D : [13]                 	endif
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 41 - 4/3/2023 13:9:54


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  1 - |  CNZ_Call00 :                  1615 C |
 CNZ_Call01 :                  1680 C |  CNZ_Call02 :                  14DF C |
 CNZ_Call03 :                  156F C |  CNZ_Call04 :                  19FC C |
 CNZ_DAC :                     1A0B C |  CNZ_FM1 :                     13B0 C |
 CNZ_FM2 :                     16C9 C |  CNZ_FM3 :                     1482 C |
 CNZ_FM4 :                     15B8 C |  CNZ_FM5 :                     17E1 C |
*CNZ_Header :                  1380 C |  CNZ_Jump00 :                  17EA C |
 CNZ_Jump01 :                  16D2 C |  CNZ_Jump02 :                  15BE C |
 CNZ_Jump03 :                  1488 C |  CNZ_Jump04 :                  13B4 C |
 CNZ_Jump05 :                  196A C |  CNZ_Jump06 :                  1901 C |
 CNZ_Loop00 :                  1A13 C |  CNZ_Loop01 :                  1A27 C |
 CNZ_Loop02 :                  1A39 C |  CNZ_Loop03 :                  19D7 C |
 CNZ_Loop04 :                  19E3 C |  CNZ_Loop05 :                  19EF C |
 CNZ_PSG1 :                    18FF C |  CNZ_PSG2 :                    1968 C |
 CNZ_PSG3 :                    19D3 C |  CNZ_Voices :                  1A52 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
*CUSTOM :                         0 - | *DATE :                  "4/3/2023" - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         7 - | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*RELAXED :                        0 - |  SMPS2ASMVer :                    1 - |
 SonicDriverVer :                 2 - |  SourceDriver :                   2 - |
 SourceSMPS2ASM :                 1 - | *TIME :                   "13:9:54" - |
*TRUE :                           1 - | *VERSION :                     142F - |
*Z80SYNTAX :                      0 - | *cFM3 :                           2 - |
*cFM4 :                           4 - | *cFM5 :                           5 - |
*cFM6 :                           6 - | *cNoise :                        E0 - |
*cPSG1 :                         80 - | *cPSG2 :                         A0 - |
*cPSG3 :                         C0 - | *dClap :                         83 - |
*dFloorTom :                     8E - | *dHiClap :                       8F - |
*dHiTimpani :                    88 - | *dHiTom :                        86 - |
 dKick :                         81 - | *dLowClap :                      91 - |
*dLowTimpani :                   8A - | *dLowTom :                       8D - |
*dMidClap :                      90 - | *dMidTimpani :                   89 - |
*dMidTom :                       8C - | *dScratch :                      84 - |
 dSnare :                        82 - | *dTimpani :                      85 - |
*dVLowClap :                     87 - | *dVLowTimpani :                  8B - |
 fTone_01 :                       1 - |  fTone_02 :                       2 - |
*fTone_03 :                       3 - | *fTone_04 :                       4 - |
*fTone_05 :                       5 - | *fTone_06 :                       6 - |
*fTone_07 :                       7 - | *fTone_08 :                       8 - |
*fTone_09 :                       9 - | *fTone_0A :                       A - |
*fTone_0B :                       B - | *fTone_0C :                       C - |
*fTone_0D :                       D - | *nA0 :                           8A - |
 nA1 :                           96 - | *nA2 :                           A2 - |
 nA3 :                           AE - |  nA4 :                           BA - |
 nA5 :                           C6 - | *nA6 :                           D2 - |
*nA7 :                           DE - | *nAb0 :                          89 - |
 nAb1 :                          95 - | *nAb2 :                          A1 - |
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 42 - 4/3/2023 13:9:54


 nAb3 :                          AD - |  nAb4 :                          B9 - |
 nAb5 :                          C5 - | *nAb6 :                          D1 - |
*nAb7 :                          DD - | *nB0 :                           8C - |
 nB1 :                           98 - | *nB2 :                           A4 - |
 nB3 :                           B0 - |  nB4 :                           BC - |
 nB5 :                           C8 - | *nB6 :                           D4 - |
*nBb0 :                          8B - |  nBb1 :                          97 - |
*nBb2 :                          A3 - |  nBb3 :                          AF - |
 nBb4 :                          BB - |  nBb5 :                          C7 - |
*nBb6 :                          D3 - | *nBb7 :                          DF - |
*nC0 :                           81 - | *nC1 :                           8D - |
 nC2 :                           99 - |  nC3 :                           A5 - |
 nC4 :                           B1 - |  nC5 :                           BD - |
 nC6 :                           C9 - | *nC7 :                           D5 - |
*nCs0 :                          82 - | *nCs1 :                          8E - |
*nCs2 :                          9A - | *nCs3 :                          A6 - |
*nCs4 :                          B2 - | *nCs5 :                          BE - |
*nCs6 :                          CA - | *nCs7 :                          D6 - |
*nD0 :                           83 - | *nD1 :                           8F - |
 nD2 :                           9B - |  nD3 :                           A7 - |
 nD4 :                           B3 - |  nD5 :                           BF - |
 nD6 :                           CB - | *nD7 :                           D7 - |
*nE0 :                           85 - |  nE1 :                           91 - |
 nE2 :                           9D - |  nE3 :                           A9 - |
 nE4 :                           B5 - |  nE5 :                           C1 - |
 nE6 :                           CD - | *nE7 :                           D9 - |
*nEb0 :                          84 - | *nEb1 :                          90 - |
 nEb2 :                          9C - | *nEb3 :                          A8 - |
 nEb4 :                          B4 - |  nEb5 :                          C0 - |
*nEb6 :                          CC - | *nEb7 :                          D8 - |
*nF0 :                           86 - |  nF1 :                           92 - |
 nF2 :                           9E - |  nF3 :                           AA - |
 nF4 :                           B6 - |  nF5 :                           C2 - |
 nF6 :                           CE - | *nF7 :                           DA - |
*nFs0 :                          87 - |  nFs1 :                          93 - |
*nFs2 :                          9F - | *nFs3 :                          AB - |
*nFs4 :                          B7 - |  nFs5 :                          C3 - |
*nFs6 :                          CF - | *nFs7 :                          DB - |
*nG0 :                           88 - |  nG1 :                           94 - |
 nG2 :                           A0 - |  nG3 :                           AC - |
 nG4 :                           B8 - |  nG5 :                           C4 - |
*nG6 :                           D0 - | *nG7 :                           DC - |
 nMaxPSG :                       C6 - | *nMaxPSG1 :                      D2 - |
*nMaxPSG2 :                      D2 - |  nRst :                          80 - |
*panCenter :                     C0 - | *panCentre :                     C0 - |
 panLeft :                       80 - | *panNone :                        0 - |
 panRight :                      40 - |  psgdelta :                       C - |
*smpsNoAttack :                  E7 - | *smpsPitch00 :                    0 - |
*smpsPitch01hi :                  C - | *smpsPitch01lo :                 F4 - |
*smpsPitch02hi :                 18 - | *smpsPitch02lo :                 E8 - |
*smpsPitch03hi :                 24 - | *smpsPitch03lo :                 DC - |
*smpsPitch04hi :                 30 - | *smpsPitch04lo :                 D0 - |
*smpsPitch05hi :                 3C - | *smpsPitch05lo :                 C4 - |
*smpsPitch06hi :                 48 - | *smpsPitch06lo :                 B8 - |
*smpsPitch07hi :                 54 - | *smpsPitch07lo :                 AC - |
*smpsPitch08hi :                 60 - | *smpsPitch08lo :                 A0 - |
*smpsPitch09hi :                 6C - | *smpsPitch09lo :                 94 - |
*smpsPitch10hi :                 78 - | *smpsPitch10lo :                 88 - |
 songStart :                   1380 - |  vcAM1 :                          0 - |
 vcAM2 :                          0 - |  vcAM3 :                          0 - |
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 43 - 4/3/2023 13:9:54


 vcAM4 :                          0 - |  vcAR1 :                         14 - |
 vcAR2 :                         1F - |  vcAR3 :                         14 - |
 vcAR4 :                         1F - |  vcAlgorithm :                    4 - |
 vcCF1 :                          3 - |  vcCF2 :                          1 - |
 vcCF3 :                          3 - |  vcCF4 :                          1 - |
 vcD1R1 :                         7 - |  vcD1R1Unk :                      0 - |
 vcD1R2 :                         5 - |  vcD1R2Unk :                      0 - |
 vcD1R3 :                         5 - |  vcD1R3Unk :                      0 - |
 vcD1R4 :                         5 - |  vcD1R4Unk :                      0 - |
 vcD2R1 :                         2 - |  vcD2R2 :                         2 - |
 vcD2R3 :                         2 - |  vcD2R4 :                         2 - |
 vcDL1 :                          A - |  vcDL2 :                          1 - |
 vcDL3 :                          6 - |  vcDL4 :                          1 - |
 vcDT1 :                          3 - |  vcDT2 :                          0 - |
 vcDT3 :                          0 - |  vcDT4 :                          6 - |
 vcFeedback :                     5 - |  vcRR1 :                          F - |
 vcRR2 :                          F - |  vcRR3 :                          F - |
 vcRR4 :                          F - |  vcRS1 :                          2 - |
 vcRS2 :                          1 - |  vcRS3 :                          2 - |
 vcRS4 :                          1 - |  vcTL1 :                         80 - |
 vcTL2 :                         1E - |  vcTL3 :                         80 - |
 vcTL4 :                         1E - |  vcTLMask1 :                      0 - |
 vcTLMask2 :                      0 - |  vcTLMask3 :                      0 - |
 vcTLMask4 :                      0 - |  vcUnusedBits :                   0 - |

    281 symbols
    140 unused symbols

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 44 - 4/3/2023 13:9:54


  Defined Macros:
  ---------------

CheckedChannelPointer                 | PSGPitchConvert                      
convertMainTempoMod                   | smpsAlterNote                        
smpsAlterPitch                        | smpsAlterVol                         
smpsCall                              | smpsChanTempoDiv                     
smpsChangeTransposition               | smpsClearPush                        
smpsDetune                            | smpsFMAlterVol                       
smpsFMFlutter                         | smpsFMvoice                          
smpsFade                              | smpsHeaderChan                       
smpsHeaderChanSFX                     | smpsHeaderDAC                        
smpsHeaderFM                          | smpsHeaderPSG                        
smpsHeaderSFXChannel                  | smpsHeaderStartSong                  
smpsHeaderTempo                       | smpsHeaderTempoSFX                   
smpsHeaderVoice                       | smpsHeaderVoiceNull                  
smpsHeaderVoiceUVB                    | smpsJump                             
smpsLoop                              | smpsMaxRelRate                       
smpsModOff                            | smpsModOn                            
smpsModSet                            | smpsNop                              
smpsNoteFill                          | smpsPSGAlterVol                      
smpsPSGform                           | smpsPSGvoice                         
smpsPan                               | smpsReturn                           
smpsSetTempoDiv                       | smpsSetTempoMod                      
smpsSetVol                            | smpsSetvoice                         
smpsStop                              | smpsStopSpecial                      
smpsVcAlgorithm                       | smpsVcAmpMod                         
smpsVcAttackRate                      | smpsVcCoarseFreq                     
smpsVcDecayLevel                      | smpsVcDecayRate1                     
smpsVcDecayRate2                      | smpsVcDetune                         
smpsVcFeedback                        | smpsVcRateScale                      
smpsVcReleaseRate                     | smpsVcTotalLevel                     
smpsVcUnusedBits                      | smpsWeirdD1LRR                       

     60 macros

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 45 - 4/3/2023 13:9:54


  Defined Functions:
  ------------------

s3TempotoS2                           | s3TempotoS1                          
s1TempotoS3                           | s1TempotoS2                          
s2TempotoS3                           | s2TempotoS1                          
conv0To256                            | z80_ptr                              

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 46 - 4/3/2023 13:9:54


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.06 seconds assembly time

   1328 lines source file
   2270 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
